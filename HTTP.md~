title: 浅谈HTTPS
date: 2014-10-31 11:13:41
tags: HTTPS
categories: HTTP
---
##0x01 HTTPS概述

HTTPS(Hyper Text Transfer Protocol over Secure Socket Layer)是在安全的传输层上发送dHTTP。HTTPS不是直接将未加密的HTTP报文发送给TCP。先将其发送给一个安全层，对其进行加密。

<!--more -->

HTTP安全层是通过SSl以及TLS实现的。本文直接使用SSL来表示SSL或者TLS。

![](http://evilddog.qiniudn.com/HTTP-HTTPS.png)

<br/>
<hr/>

##0x02 SSL

SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。


HTTPS与HTTP的最大的不同之处在于SSL安全层的存在。在HTTPS中，客户端首先打开一条Web服务器端口443(不同于HTTP的80)的链接。

![](http://evilddog.qiniudn.com/HTTP-HTTPS.jpg)


建立TCP传输之后，客户端和服务器就会初始化SSL层，对加密进行沟通。交换密钥，SSL初始化完成之后，客户端就可以将请求报文发给安全层。


在这个过程中SSL握手的过程主要完成以下工作：

    交换协议版本号
    选择一个两段都了解的密码
    对两段的身份进行认证
    生成临时的回话密钥，便于加密信道

SSL握手的示意图如下：

![](http://evilddog.qiniudn.com/SSL.jpg)

值得注意的是：

SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。


整个过程如下

    假设A与B通信，A是SSL客户端，B是SSL服务器端，加密后的消息放在方括号[]里，以突出明文消息的区别。双方的处理动作的说明用圆括号（）括起。

    A：我想和你安全的通话，我这里的对称加密算法有DES,RC5,密钥交换算法有RSA和DH，摘要算法有MD5和SHA。

    B：我们用DES－RSA－SHA这对组合好了。

    这是我的证书，里面有我的名字和公钥，你拿去验证一下我的身份（把证书发给A）。

    A：（查看证书上B的名字是否无误，并通过手头早已有的数字的证书验证了B的证书的真实性，如果其中一项有误，发出警告并断开连接，这一步保证了B的公钥的真实性）

    （产生一份秘密消息，这份秘密消息处理后将用作对称加密密钥，加密初始化向量和hmac的密钥。将这份秘密消息-协议中称为per_master_secret-用B的公钥加密，封装成称作ClientKeyExchange的消息。由于用了B的公钥，保证了第三方无法窃听）

    我生成了一份秘密消息，并用你的公钥加密了，给你（把ClientKeyExchange发给B）

    注意，下面我就要用加密的办法给你发消息了！

    （将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥）

    [我说完了]

    B：（用自己的私钥将ClientKeyExchange中的秘密消息解密出来，然后将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥，这时双方已经安全的协商出一套加密办法了）

    注意，我也要开始用加密的办法给你发消息了！

    [我说完了]

    A: [我的秘密是...]

    B: [其它人不会听到的...]


##0x03 数字证书

数字证书是一种网络上证明持有者身份的文件，同时还包含有公钥。一方面，既然是文件那么就有可能“伪造”，因此，证书的真伪就需要一个验证方式；另一方面，验证方需要认同这种验证方式。

证书可以由国际上公认的证书机构颁发，这些机构是公认的信任机构，一些验证证书的客户端应用程序：比如浏览器，邮件客户端等，对于这些机构颁发的证书完全信任。当然想要请这些机构颁发证书可是要付“到了斯”的，通常在windows部署系统的时候会让客户端安装我们自己服务器的根证书，这样客户端同样可以信任我们的证书。

##0x04 非对称密钥加密
SSL使用的非对称加密算法（asymmetric cryptographic algorithm）又名“公开密钥加密算法”。

所谓非对称密钥加密简单的说就是客户端和服务器都各自生成一对密钥，每对密钥都包含一个公开密钥和私有密钥。

公钥与私钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为它们不相同所以叫做非对称密钥加密。

比如在传输之前客户端和服务器交换各自的公钥，客户端发送的报文使用服务器的公钥加密之后发出，只有服务器的私钥能解开；服务器发送的报文经过客户端的公钥加密之后，只有客户端的私钥能解开，这样就保证了报文在传输过程中的安全。

##0x05
其实HTTPS中的SSl以及TLS是一个相当复杂的过程有兴趣可以[戳一下](http://kb.cnblogs.com/page/162080/)，笔者只是浅谈一下HTTP和HTTPS的区别
