title:  浅谈Nmap 基本操作
date:  2014-10-28 14:25:44
tags:  Nmap
categories: Tools
---

##0x00 Nmap介绍

Nmap  （网络映射器）是由 Gordon Lyon设计，用来探测计算机网络上的主机和服务的一种安全扫描器。为了绘制网络拓扑图，Nmap的发送特制的数据包到目标主机，然后对返回数据包进行分析。Nmap是一款枚举和测试网络的强大工具。

<!--more-->

Nmap特点：

    主机探测：探测网络上的主机，例如列出响应TCP和ICMP请求、icmp请求、开放特别端口的主机。 
    端口扫描：探测目标主机所开放的端口。 
    版本检测：探测目标主机的网络服务，判断其服务名称及版本号。 
    系统检测：探测目标主机的操作系统及网络设备的硬件特性。 
    支持探测脚本的编写：使用Nmap的脚本引擎（NSE）和Lua编程语言。

Nmap 能扫描出目标的详细信息包括、[DNS反解](http://www.debouncer.com/reverse-dns-check)、设备类型和mac地址。
<br/>
Nmap用途

    1、通过对设备或者防火墙的探测来审计它的安全性。 
    2、探测目标主机所开放的端口。 
    3、网络存储，网络映射，维护和资产管理。（这个有待深入） 
    4、通过识别新的服务器审计网络的安全性。 
    5、探测网络上的主机。

<br/>
<hr/>


##0x01主机发现
主机发现（Host Discovery），即用于发现目标主机是否在线（Alive，处于开启状态）。

###主机发现原理

- 主机发现发现的原理与Ping命令类似，发送探测包到目标主机，如果收到回复，那么说明目标主机是开启的。Nmap支持十多种不同的主机探测方式，比如发送ICMP ECHO/TIMESTAMP/NETMASK报文、发送TCPSYN/ACK包、发送SCTP INIT/COOKIE-ECHO包，用户可以在不同的条件下灵活选用不同的方式来探测目标机。

基本原理：（以ICMP echo为例）
![](http://evilddog.qiniudn.com/ICMP-echo.jpg)

Nmap的用户位于源端，IP地址192.168.0.5，向目标主机192.168.0.3发送ICMP Echo Request。如果该请求报文没有被防火墙拦截掉，那么目标机会回复ICMP Echo Reply包回来。以此来确定目标主机是否在线。

默认情况下，Nmap会发送四种不同类型的数据包来探测目标主机是否在线。

    ICMP echo request
    a TCP SYN packet to port 443
    a TCP ACK packet to port 80
    an ICMP timestamp request

依次发送四个报文探测目标机是否开启。只要收到其中一个包的回复，那就证明目标机开启。使用四种不同类型的数据包可以避免因防火墙或丢包造成的判断错误。
<hr/>


###主机发现用法

通常主机发现并不单独使用，而只是作为端口扫描、版本侦测、OS侦测先行步骤。而在某些特殊应用（例如确定大型局域网内活动主机的数量），可能会单独专门适用主机发现功能来完成。不管是作为辅助用法还是专门用途，用户都可以使用Nmap提供的丰富的选项来定制主机发现的探测方式。

    -sL: List Scan 列表扫描，仅将指定的目标的IP列举出来，不进行主机发现。

    -sn: Ping Scan 只进行主机发现，不进行端口扫描。

    -Pn: 将所有指定的主机视作开启的，跳过主机发现的过程。

    -PS/PA/PU/PY[portlist]: 使用TCPSYN/ACK或SCTP INIT/ECHO方式进行发现。

    -PE/PP/PM: 使用ICMP echo, timestamp, and netmask 请求包发现主机。-PO[protocollist]: 使用IP协议包探测对方主机是否开启。

    -n/-R: -n表示不进行DNS解析；-R表示总是进行DNS解析。

    --dns-servers <serv1[,serv2],...>: 指定DNS服务器。

    --system-dns: 指定使用系统的DNS服务器

    --traceroute: 追踪每个路由节点

<br/>
<hr/>

##0x02端口扫描

端口扫描是Nmap最基本最核心的功能，用于确定目标主机的TCP/UDP端口的开放情况。

默认情况下，Nmap会扫描1000个最有可能开放的TCP端口。

Nmap通过探测将端口划分为6个状态：

    <b>open<b/>：端口是开放的。
    <b>closed</b>：端口是关闭的。
    <b>filtered<b/>：端口被防火墙IDS/IPS屏蔽，无法确定其状态。
    <b>unfiltered<b/>：端口没有被屏蔽，但是否开放需要进一步确定。
    <b>open|filtered<b/>：端口是开放的或被屏蔽。
    <b>losed|filtered <b/>：端口是关闭的或被屏蔽。

<br/>

###端口扫描原理:

Nmap在端口扫描方面非常强大，提供了十多种探测方式。
<hr/>

####TCP SYN scanning

这是Nmap默认的扫描方式，通常被称作半开放扫描（Half-open scanning）。该方式发送SYN到目标端口，如果收到SYN/ACK回复，那么判断端口是开放的；如果收到RST包，说明该端口是关闭的。如果没有收到回复，那么判断该端口被屏蔽（Filtered）。因为该方式仅发送SYN包对目标主机的特定端口，但不建立的完整的TCP连接，所以相对比较隐蔽，而且效率比较高，适用范围广。

TCP SYN探测到端口关闭：![](http://evilddog.qiniudn.com/tcp-syn.jpg)
TCP SYN探测到端口开放：![](http://evilddog.qiniudn.com/tcp-syn-close.jpg)
<hr/>

####TCP connect scanning

TCP connect方式使用系统网络API connect向目标主机的端口发起连接，如果无法连接，说明该端口关闭。该方式扫描速度比较慢，而且由于建立完整的TCP连接会在目标机上留下记录信息，不够隐蔽。所以，TCP connect是TCP SYN无法使用才考虑选择的方式。

TCP connect探测到端口关闭：![](http://evilddog.qiniudn.com/tcp-close.jpg)
TCP connect探测到端口开放：![](http://evilddog.qiniudn.com/tcp-open.jpg)
<hr/>

#### TCP ACK scanning

向目标主机的端口发送ACK包，如果收到RST包，说明该端口没有被防火墙屏蔽；没有收到RST包，说明被屏蔽。该方式只能用于确定防火墙是否屏蔽某个端口，可以辅助TCP SYN的方式来判断目标主机防火墙的状况。

TCP ACK探测到端口被屏蔽：![](http://evilddog.qiniudn.com/tcp-ack-close.jpg)
TCP ACK探测到端口被未被屏蔽：![](http://evilddog.qiniudn.com/tcp-ack-open.jpg)
<hr/>

####TCP FIN/Xmas/NULL scanning

这三种扫描方式被称为秘密扫描（Stealthy Scan），因为相对比较隐蔽。FIN扫描向目标主机的端口发送的TCP FIN包或Xmas tree包/Null包，如果收到对方RST回复包，那么说明该端口是关闭的；没有收到RST包说明端口可能是开放的或被屏蔽的（open|filtered）。

其中Xmas tree包是指flags中FIN URG PUSH被置为1的TCP包；NULL包是指所有flags都为0的TCP包。 
TCP FIN探测到主机端口是关闭的：![](http://evilddog.qiniudn.com/tcp-fin-close.jpg)

TCP FIN探测到主机端口是开放或屏蔽的：![](http://evilddog.qiniudn.com/tcp-fin-open.jpg)
<hr/>

####UDP scanning
UDP扫描方式用于判断UDP端口的情况。向目标主机的UDP端口发送探测包，如果收到回复“ICMP port unreachable”就说明该端口是关闭的；如果没有收到回复，那说明UDP端口可能是开放的或屏蔽的。因此，通过反向排除法的方式来断定哪些UDP端口是可能出于开放状态。

UDP端口关闭：![](http://evilddog.qiniudn.com/tcp-udp-close.jpg)

UDP端口开放或被屏蔽：![](http://evilddog.qiniudn.com/tcp-udp-open.jpg)	


###端口扫描用法
<br/>
####扫描方式

    -sS/sT/sA/sW/sM:指定使用 TCP SYN/Connect()/ACK/Window/Maimon scans的方式来对目标主机进行扫描。

    -sU: 指定使用UDP扫描方式确定目标主机的UDP端口状况。

    -sN/sF/sX: 指定使用TCP Null, FIN, and Xmas scans秘密扫描方式来协助探测对方的TCP端口状态。

    --scanflags <flags>: 定制TCP包的flags。

    -sI <zombiehost[:probeport]>: 指定使用idle scan方式来扫描目标主机（前提需要找到合适的zombie host）

    -sY/sZ: 使用SCTP INIT/COOKIE-ECHO来扫描SCTP协议端口的开放的情况。

    -sO: 使用IP protocol 扫描确定目标机支持的协议类型。

    -b <FTP relay host>: 使用FTP bounce scan扫描方式

<br/>

####端口参数和顺序
    
    -p <port ranges>: 扫描指定的端口

    实例: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9（其中T代表TCP协议、U代表UDP协议、S代表SCTP协议）

    -F: Fast mode – 快速模式，仅扫描TOP 100的端口

    -r: 不进行端口随机打乱的操作（如无该参数，nmap会将要扫描的端口以随机顺序方式扫描，以让nmap的扫描不易被对方防火墙检测到）。

    --top-ports <number>:扫描开放概率最高的number个端口（nmap的作者曾经做过大规模地互联网扫描，以此统计出网络上各种端口可能开放的概率。以此排列出最有可能开放端口的列表，具体可以参见文件：nmap-services。默认情况下，nmap会扫描最有可能的1000个TCP端口）

    --port-ratio <ratio>: 扫描指定频率以上的端口。与上述--top-ports类似，这里以概率作为参数，让概率大于--port-ratio的端口才被扫描。显然参数必须在在0到1之间，具体范围概率情况可以查看nmap-services文件。


<br/>
<hr/>


##0x03版本侦测

版本侦测，用于确定目标主机开放端口上运行的具体的应用程序及版本信息。

Nmap提供的版本侦测具有如下的优点：

- 高速。并行地进行套接字操作，实现一组高效的探测匹配定义语法。
- 尽可能地确定应用名字与版本名字。
- 支持TCP/UDP协议，支持文本格式与二进制格式。
- 支持多种平台服务的侦测，包括Linux/Windows/Mac OS/FreeBSD等系统。
- 如果检测到SSL，会调用openSSL继续侦测运行在SSL上的具体协议（如HTTPS/POP3S/IMAPS）。
- 如果检测到SunRPC服务，那么会调用brute-force RPC grinder进一步确定RPC程序编号、名字、版本号。
- 支持完整的IPv6功能，包括TCP/UDP，基于TCP的SSL。
- 通用平台枚举功能（CPE）
- 广泛的应用程序数据库（nmap-services-probes）。目前Nmap可以识别几千种服务的签名，包含了180多种不同的协议。

<br/>
###版本侦测原理

版本侦测主要分为以下几个步骤：

1. 首先检查open与open|filtered状态的端口是否在排除端口列表内。如果在排除列表，将该端口剔除。
2. 如果是TCP端口，尝试建立TCP连接。尝试等待片刻（通常6秒或更多，具体时间可以查询文件nmap-services-probes中Probe TCP NULL q||对应的totalwaitms）。通常在等待时间内，会接收到目标机发送的“WelcomeBanner”信息。nmap将接收到的Banner与nmap-services-probes中NULL probe中的签名进行对比。查找对应应用程序的名字与版本信息。
3. 如果通过“Welcome Banner”无法确定应用程序版本，那么nmap再尝试发送其他的探测包（即从nmap-services-probes中挑选合适的probe），将probe得到回复包与数据库中的签名进行对比。如果反复探测都无法得出具体应用，那么打印出应用返回报文，让用户自行进一步判定。
4. 如果是UDP端口，那么直接使用nmap-services-probes中探测包进行探测匹配。根据结果对比分析出UDP应用服务类型。
5. 如果探测到应用程序是SSL，那么调用openSSL进一步的侦查运行在SSL之上的具体的应用类型。
6. 如果探测到应用程序是SunRPC，那么调用brute-force RPC grinder进一步探测具体服务。
	
<br/>


###版本侦测的用法

    -sV: 指定让Nmap进行版本侦测

    --version-intensity <level>: 指定版本侦测强度（0-9），默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长。

    --version-light: 指定使用轻量侦测方式 (intensity 2)

    --version-all: 尝试使用所有的probes进行侦测 (intensity 9)

    --version-trace: 显示出详细的版本侦测过程信息。


<br/>
<hr/>

##0x04操作系统侦测

###OS侦测原理

Nmap使用TCP/IP协议栈指纹来识别不同的操作系统和设备。在RFC规范中，有些地方对TCP/IP的实现并没有强制规定，由此不同的TCP/IP方案中可能都有自己的特定方式。Nmap主要是根据这些细节上的差异来判断操作系统的类型的。

具体实现方式如下：

1. Nmap内部包含了2600多已知系统的指纹特征（在文件nmap-os-db文件中）。将此指纹数据库作为进行指纹对比的样本库。
2. 分别挑选一个open和closed的端口，向其发送经过精心设计的TCP/UDP/ICMP数据包，根据返回的数据包生成一份系统指纹。
3. 将探测生成的指纹与nmap-os-db中指纹进行对比，查找匹配的系统。如果无法匹配，以概率形式列举出可能的系统。

###OS侦测用法

    -O: 指定Nmap进行OS侦测。  
      
    --osscan-limit: 限制Nmap只对确定的主机的进行OS探测（至少需确知该主机分别有一个open和closed的端口）。  
      
    --osscan-guess: 大胆猜测对方的主机的系统类型。由此准确性会下降不少，但会尽可能多为用户提供潜在的操作系统。  





<br/>
<hr/>

##0x05